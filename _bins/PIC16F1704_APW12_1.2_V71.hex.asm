;
; +-------------------------------------------------------------------------+
; |      This file was generated by The Interactive Disassembler (IDA)      |
; |           Copyright (c) 2024 Hex-Rays, <support@hex-rays.com>           |
; |                      License info: 48-2137-ACAB-99                      |
; |                                exetools                                 |
; +-------------------------------------------------------------------------+
;
; Input SHA256 : E7CB2C98B39FF20538878C7ED32735CE509D5592A666AE20C75BEAE976D59123
; Input MD5    : DAF4D3F34F5E007EC44C71C79D570E2F
; Input CRC32  : EB2A1470

; File Name   : /home/danielsokil/Downloads/Bitmain_APW12_Peek/_bins/PIC16F1704_APW12_1.2_V71.hex
; Format      : Intel Hex Object Format

; Processor       : PIC16Cxx
; Target assembler: Microchip's MPALC
include "P16f1704.INC"



; Segment type: Pure code
; .text (CODE)
; assume bank = 0
; assume pclath = 0


; Reset Vector

; public RESET
RESET:

; FUNCTION CHUNK AT 00D8 SIZE 00000465 BYTES

movlp   0
b       loc_CODE_D8
; End of function RESET




sub_CODE_2:
retlw   80
; End of function sub_CODE_2

; [00000001 BYTES: COLLAPSED FUNCTION nullsub_1]


; Interrupt Vector

; public ISR
ISR:
bsf     byte_DATA_7E, 0
movlp   0
movlb   0
movfw   byte_DATA_7F
movwf   byte_DATA_35
movlp   0D
; assume pclath = 0D
call    sub_CODE_D82
movlp   0
; assume pclath = 0
movlb   0
btfss   BANK0:PIR2, TMR4IF
 b       loc_CODE_AB
movlw   1
addwf   byte_DATA_40, f
movlw   0
addwfc  byte_DATA_41, f
movlw   0
addwfc  byte_DATA_42, f
movlw   0
addwfc  byte_DATA_43, f
movlw   0
movwf   byte_DATA_73
movlw   0
movwf   byte_DATA_72
movlw   0
movwf   byte_DATA_71
movlw   64 ; 'd'
movwf   byte_DATA_70
movfw   byte_DATA_43
movwf   byte_DATA_77
movfw   byte_DATA_42
movwf   byte_DATA_76
movfw   byte_DATA_41
movwf   byte_DATA_75
movfw   byte_DATA_40
movwf   byte_DATA_74
movlp   0B
; assume pclath = 0B
call    sub_CODE_BF9
movlp   0
; assume pclath = 0
movfw   byte_DATA_73
iorwf   byte_DATA_72, w
iorwf   byte_DATA_71, w
iorwf   byte_DATA_70, w
bnz     loc_CODE_42
movlw   0
movlb   0
movwf   byte_DATA_43
movlw   0
movwf   byte_DATA_42
movlw   0
movwf   byte_DATA_41
movlw   0
movwf   byte_DATA_40
movlw   1
movlb   1
; assume bank = 1
addwf   byte_DATA_A0, f
movlw   0
addwfc  byte_DATA_A1, f
movlw   0
addwfc  byte_DATA_A2, f
movlw   0
addwfc  byte_DATA_A3, f
; assume bank = 0

loc_CODE_42:
movlb   0
bcf     BANK0:PIR2, TMR4IF
movfw   byte_DATA_51
bnz     loc_CODE_AB
movlp   9
; assume pclath = 9
call    sub_CODE_92A
movlp   0
; assume pclath = 0
xorlw   0
bz      loc_CODE_AB
movlp   9
; assume pclath = 9
call    sub_CODE_948
movlp   0
; assume pclath = 0
movfw   byte_DATA_71
movlb   0
movwf   byte_DATA_37
movfw   byte_DATA_70
movwf   byte_DATA_36
movfw   byte_DATA_52
bnz     loc_CODE_81
movlw   7
movlp   9
; assume pclath = 9
call    sub_CODE_9CA
movlp   0
; assume pclath = 0
movlb   0
movfw   byte_DATA_37
movwf   byte_DATA_21
movfw   byte_DATA_36
movwf   byte_DATA_20
movlw   54 ; 'T'
movwf   byte_DATA_30
movfw   byte_DATA_30
movwf   byte_DATA_22
movlw   48 ; 'H'
movwf   byte_DATA_31
movfw   byte_DATA_31
movwf   byte_DATA_23
movlw   0B4
movwf   byte_DATA_32
movfw   byte_DATA_32
movwf   byte_DATA_24
movlw   0C8
movwf   byte_DATA_33
movfw   byte_DATA_33
movwf   byte_DATA_25
movlw   0C9
movwf   byte_DATA_34
movfw   byte_DATA_34
movwf   byte_DATA_26
movlp   7
; assume pclath = 7
call    sub_CODE_746
movlp   0
; assume pclath = 0
movlb   0
movfw   byte_DATA_37
movlb   1
; assume bank = 1
movwf   byte_DATA_AD
movlb   0
; assume bank = 0
movfw   byte_DATA_36
movlb   1
; assume bank = 1
movwf   byte_DATA_AC
b       loc_CODE_A9
; assume bank = 0

loc_CODE_81:
movlw   3
movlp   9
; assume pclath = 9
call    sub_CODE_9CA
movlp   0
; assume pclath = 0
movlb   0
movfw   byte_DATA_37
movwf   byte_DATA_21
movfw   byte_DATA_36
movwf   byte_DATA_20
movlw   55 ; 'U'
movwf   byte_DATA_30
movfw   byte_DATA_30
movwf   byte_DATA_22
movlw   5C ; '\'
movwf   byte_DATA_31
movfw   byte_DATA_31
movwf   byte_DATA_23
movlw   0B8
movwf   byte_DATA_32
movfw   byte_DATA_32
movwf   byte_DATA_24
movlw   0CA
movwf   byte_DATA_33
movfw   byte_DATA_33
movwf   byte_DATA_25
movlw   0CB
movwf   byte_DATA_34
movfw   byte_DATA_34
movwf   byte_DATA_26
movlp   7
; assume pclath = 7
call    sub_CODE_746
movlp   0
; assume pclath = 0
movlb   0
movfw   byte_DATA_37
movlb   1
; assume bank = 1
movwf   byte_DATA_AF
movlb   0
; assume bank = 0
movfw   byte_DATA_36
movlb   1
; assume bank = 1
movwf   byte_DATA_AE

loc_CODE_A9:
movlb   0
; assume bank = 0
comf    byte_DATA_52, f

loc_CODE_AB:
movlp   9
; assume pclath = 9
call    sub_CODE_95A
movlp   0
; assume pclath = 0
xorlw   0
bz      loc_CODE_C7
movlb   1
; assume bank = 1
movfw   byte_DATA_B0
xorwf   byte_DATA_B1, w
bz      loc_CODE_C7
movfw   byte_DATA_B1
subwf   byte_DATA_B0, w
bc      loc_CODE_C1
movlw   1
movlb   0
; assume bank = 0
movwf   byte_DATA_30
movfw   byte_DATA_30
movlb   1
; assume bank = 1
addwf   byte_DATA_B0, f
b       loc_CODE_C3

loc_CODE_C1:
movlw   1
subwf   byte_DATA_B0, f

loc_CODE_C3:
movfw   byte_DATA_B0
movlp   9
; assume pclath = 9
call    sub_CODE_938
movlp   0
; assume pclath = 0

loc_CODE_C7:
btfss   BANK1:INTCON, IOCIF
 b       loc_CODE_D3
movlb   7
; assume bank = 7
movfw   BANK7:IOCAF
movfw   BANK7:IOCCF
skpz
 btfss   BANK7:IOCCF, IOCCF4
 b       loc_CODE_D3
movlb   0
; assume bank = 0
movfw   BANK0:PORTC
movlb   7
; assume bank = 7
bcf     BANK7:IOCCF, IOCCF4

loc_CODE_D3:
movlb   0
; assume bank = 0
movfw   byte_DATA_35
movwf   byte_DATA_7F
bcf     byte_DATA_7E, 0
retfie
; End of function ISR

; START OF FUNCTION CHUNK FOR RESET

loc_CODE_D8:
movlp   0
b       loc_CODE_DA

loc_CODE_DA:
movlp   0
call    sub_CODE_2
movlp   0
movwf   byte_DATA_56
movlp   0
call    nullsub_1
movlp   0
movwf   byte_DATA_57
movlb   1
; assume bank = 1
movlp   9
; assume pclath = 9
call    nullsub_3
movlp   0
; assume pclath = 0
movwf   byte_DATA_EB
movlp   9
; assume pclath = 9
call    sub_CODE_913
movlp   0
; assume pclath = 0
movwf   byte_DATA_EC
movlw   byte_DATA_40
movwf   BANK1:FSR0
movlw   0
movwf   BANK1:FSR0H
movlw   16
movlp   9
; assume pclath = 9
call    sub_CODE_924
movlp   0
; assume pclath = 0
movlw   byte_DATA_A0
movwf   BANK1:FSR0
movlw   0
movwf   BANK1:FSR0H
movlw   2C ; ','
movlp   9
; assume pclath = 9
call    sub_CODE_924
movlp   0
; assume pclath = 0
movlw   byte_DATA_20
movwf   BANK1:FSR0
movlw   1
movwf   BANK1:FSR0H
movlw   50 ; 'P'
movlp   9
; assume pclath = 9
call    sub_CODE_924
movlp   0
; assume pclath = 0
movlw   byte_DATA_A0
movwf   BANK1:FSR0
movlw   1
movwf   BANK1:FSR0H
movlw   28 ; '('
movlp   9
; assume pclath = 9
call    sub_CODE_924
movlp   0
; assume pclath = 0
movlw   byte_DATA_20
movwf   BANK1:FSR0
movlw   2
movwf   BANK1:FSR0H
movlw   40 ; '@'
movlp   9
; assume pclath = 9
call    sub_CODE_924
bcf     byte_DATA_FE, 0
movlb   0
; assume bank = 0
movlp   1
; assume pclath = 1
b       loc_CODE_116

loc_CODE_116:
movlb   3
; assume bank = 3
clrf    byte_DATA_1D6
movlw   20 ; ' '
movwf   byte_DATA_1C8
movfw   byte_DATA_1C8
movwf   byte_DATA_1E1
clrf    byte_DATA_1DF
movlw   0
movwf   byte_DATA_1DC
movlw   0
movwf   byte_DATA_1DB
movlw   0
movwf   byte_DATA_1DA
movlw   0
movwf   byte_DATA_1D9
movlp   9
; assume pclath = 9
call    sub_CODE_918
movlp   1
; assume pclath = 1
movlp   0C
; assume pclath = 0C
call    sub_CODE_C3B
movlp   1
; assume pclath = 1
movlw   10
movlb   0
; assume bank = 0
movwf   byte_DATA_38
movlw   0
movwf   byte_DATA_39
movlp   0A
; assume pclath = 0A
call    sub_CODE_A81
movlp   1
; assume pclath = 1
movlw   2
movlb   0
movwf   byte_DATA_38
movlw   0
movwf   byte_DATA_39
movlp   0A
; assume pclath = 0A
call    sub_CODE_AC2
movlp   1
; assume pclath = 1
movlw   2
movlb   3
; assume bank = 3
movwf   byte_DATA_1C8
movfw   byte_DATA_1C8
movlb   0
; assume bank = 0
movwf   byte_DATA_38
movlw   0
movlp   0A
; assume pclath = 0A
call    sub_CODE_A14
movlp   1
; assume pclath = 1
movlb   0
clrf    byte_DATA_38
movlw   2
movlp   9
; assume pclath = 9
call    sub_CODE_9FB
movlp   1
; assume pclath = 1
movlb   0
clrf    byte_DATA_38
incf    byte_DATA_38, f
movlw   2
movlp   9
; assume pclath = 9
call    sub_CODE_9B6
movlp   1
; assume pclath = 1
movlb   0
clrf    byte_DATA_38
movlw   0
movlp   9
; assume pclath = 9
call    sub_CODE_9E2
movlp   1
; assume pclath = 1
movlw   1
movlb   0
movwf   byte_DATA_38
movlw   0
movwf   byte_DATA_39
movlp   0A
; assume pclath = 0A
call    sub_CODE_AA0
movlp   1
; assume pclath = 1
movlp   9
; assume pclath = 9
call    sub_CODE_964
movlp   1
; assume pclath = 1
movlb   3
; assume bank = 3
clrf    byte_DATA_1E0
movlw   0FF
movwf   byte_DATA_1C8
movfw   byte_DATA_1C8
movlb   1
; assume bank = 1
movwf   byte_DATA_B0
movlb   3
; assume bank = 3
movfw   byte_DATA_1E0
movlp   0B
; assume pclath = 0B
call    sub_CODE_B48
movlp   1
; assume pclath = 1
movlb   3
movfw   byte_DATA_1E0
movwf   byte_DATA_1C8
movfw   byte_DATA_1C8
movlb   1
; assume bank = 1
movwf   byte_DATA_B1
clrf    byte_DATA_B2
movlb   3
; assume bank = 3
movfw   byte_DATA_1E0
movlp   0C
; assume pclath = 0C
call    sub_CODE_C80
movlp   1
; assume pclath = 1
movlw   0FA
movlb   0
; assume bank = 0
movwf   byte_DATA_38
movlw   0F
movwf   byte_DATA_39
movlw   0BC
movwf   byte_DATA_3A
movlw   0
movwf   byte_DATA_3B
movlw   2
movwf   byte_DATA_3C
movlw   0
movwf   byte_DATA_3D
movlp   0B
; assume pclath = 0B
call    sub_CODE_B80
movlp   1
; assume pclath = 1
movlw   0DA
movlb   0
movwf   byte_DATA_38
movlw   0F
movwf   byte_DATA_39
movlw   0C0
movwf   byte_DATA_3A
movlw   0
movwf   byte_DATA_3B
movlw   2
movwf   byte_DATA_3C
movlw   0
movwf   byte_DATA_3D
movlp   0B
; assume pclath = 0B
call    sub_CODE_B80
movlp   1
; assume pclath = 1
movlb   1
; assume bank = 1
incf    byte_DATA_BC, w
movlw   3F ; '?'
skpnz
 xorwf   byte_DATA_BD, w
bnz     loc_CODE_1E0
incf    byte_DATA_BE, w
movlw   3F ; '?'
skpnz
 xorwf   byte_DATA_BF, w
bnz     loc_CODE_1E0
incf    byte_DATA_C0, w
movlw   3F ; '?'
skpnz
 xorwf   byte_DATA_C1, w
bnz     loc_CODE_1E0
incf    byte_DATA_C2, w
movlw   3F ; '?'
skpnz
 xorwf   byte_DATA_C3, w
bnz     loc_CODE_1E0
clrf    byte_DATA_C6
clrf    byte_DATA_C7
clrf    byte_DATA_C4
clrf    byte_DATA_C5
movlw   0
movwf   byte_DATA_BF
movlw   0
movwf   byte_DATA_BE
movlw   0
movwf   byte_DATA_BD
movlw   0
movwf   byte_DATA_BC
movlw   0FA
movwf   byte_DATA_CD
movlw   0F
movwf   byte_DATA_CE
movlw   0BC
movwf   byte_DATA_CF
movlw   0
movwf   byte_DATA_D0
movlw   2
movwf   byte_DATA_D1
movlw   0
movwf   byte_DATA_D2
movlp   0E
; assume pclath = 0E
call    sub_CODE_E74
movlp   1
; assume pclath = 1
movlw   0DA
movlb   1
movwf   byte_DATA_CD
movlw   0F
movwf   byte_DATA_CE
movlw   0BC
movwf   byte_DATA_CF
movlw   0
movwf   byte_DATA_D0
movlw   2
movwf   byte_DATA_D1
movlw   0
movwf   byte_DATA_D2
movlp   0E
; assume pclath = 0E
call    sub_CODE_E74
movlp   1
; assume pclath = 1
b       loc_CODE_263

loc_CODE_1E0:
movlb   1
movfw   byte_DATA_BC
movlb   3
; assume bank = 3
movwf   byte_DATA_1C8
movlb   1
; assume bank = 1
movfw   byte_DATA_BD
movlb   3
; assume bank = 3
movwf   byte_DATA_1C9
movlb   1
; assume bank = 1
movfw   byte_DATA_BE
movlb   3
; assume bank = 3
movwf   byte_DATA_1CA
movlb   1
; assume bank = 1
movfw   byte_DATA_BF
movlb   3
; assume bank = 3
movwf   byte_DATA_1CB
movlw   10

loc_CODE_1F1:
lsrf    byte_DATA_1CB, f
rrf     byte_DATA_1CA, f
rrf     byte_DATA_1C9, f
rrf     byte_DATA_1C8, f
decfsz  BANK3:WREG, f
 b       loc_CODE_1F1
incf    byte_DATA_1C8, w
movlw   3F ; '?'
skpnz
 xorwf   byte_DATA_1C9, w
iorwf   byte_DATA_1CA, w
iorwf   byte_DATA_1CB, w
bnz     loc_CODE_201
movlb   1
; assume bank = 1
b       loc_CODE_231
; assume bank = 3

loc_CODE_201:
movlb   1
; assume bank = 1
movfw   byte_DATA_C0
movlb   3
; assume bank = 3
movwf   byte_DATA_1C8
movlb   1
; assume bank = 1
movfw   byte_DATA_C1
movlb   3
; assume bank = 3
movwf   byte_DATA_1C9
movlb   1
; assume bank = 1
movfw   byte_DATA_C2
movlb   3
; assume bank = 3
movwf   byte_DATA_1CA
movlb   1
; assume bank = 1
movfw   byte_DATA_C3
movlb   3
; assume bank = 3
movwf   byte_DATA_1CB
movlw   10

loc_CODE_212:
lsrf    byte_DATA_1CB, f
rrf     byte_DATA_1CA, f
rrf     byte_DATA_1C9, f
rrf     byte_DATA_1C8, f
decfsz  BANK3:WREG, f
 b       loc_CODE_212
incf    byte_DATA_1C8, w
movlw   3F ; '?'
skpnz
 xorwf   byte_DATA_1C9, w
iorwf   byte_DATA_1CA, w
iorwf   byte_DATA_1CB, w
bz      loc_CODE_23D
movlb   1
; assume bank = 1
movfw   byte_DATA_C3
subwf   byte_DATA_BF, w
bnz     loc_CODE_22F
movfw   byte_DATA_C2
subwf   byte_DATA_BE, w
bnz     loc_CODE_22F
movfw   byte_DATA_C1
subwf   byte_DATA_BD, w
bnz     loc_CODE_22F
movfw   byte_DATA_C0
subwf   byte_DATA_BC, w

loc_CODE_22F:
bc      loc_CODE_23A

loc_CODE_231:
movfw   byte_DATA_C3
movwf   byte_DATA_BF
movfw   byte_DATA_C2
movwf   byte_DATA_BE
movfw   byte_DATA_C1
movwf   byte_DATA_BD
movfw   byte_DATA_C0
movwf   byte_DATA_BC
b       loc_CODE_241

loc_CODE_23A:
movlw   0FF
movlb   3
; assume bank = 3
b       loc_CODE_23E

loc_CODE_23D:
movlw   0FF

loc_CODE_23E:
movwf   byte_DATA_1C8
movfw   byte_DATA_1C8
movwf   byte_DATA_1DF
; assume bank = 1

loc_CODE_241:
movlb   1
movfw   byte_DATA_BC
movlb   3
; assume bank = 3
movwf   byte_DATA_1C8
movlb   1
; assume bank = 1
movfw   byte_DATA_BD
movlb   3
; assume bank = 3
movwf   byte_DATA_1C9
movlb   1
; assume bank = 1
movfw   byte_DATA_BE
movlb   3
; assume bank = 3
movwf   byte_DATA_1CA
movlb   1
; assume bank = 1
movfw   byte_DATA_BF
movlb   3
; assume bank = 3
movwf   byte_DATA_1CB
movlw   10

loc_CODE_252:
lsrf    byte_DATA_1CB, f
rrf     byte_DATA_1CA, f
rrf     byte_DATA_1C9, f
rrf     byte_DATA_1C8, f
decfsz  BANK3:WREG, f
 b       loc_CODE_252
movfw   byte_DATA_1C9
movlb   1
; assume bank = 1
movwf   byte_DATA_C7
movlb   3
; assume bank = 3
movfw   byte_DATA_1C8
movlb   1
; assume bank = 1
movwf   byte_DATA_C6
movfw   byte_DATA_BD
movwf   byte_DATA_C5
movfw   byte_DATA_BC
movwf   byte_DATA_C4

loc_CODE_263:
bsf     BANK1:INTCON, GIE

loc_CODE_264:
clrwdt
movlw   2
movlb   1
xorwf   byte_DATA_B3, w
bz      loc_CODE_3F0
b       loc_CODE_412
; assume bank = 3

loc_CODE_26B:
movlb   3
movfw   byte_DATA_1E1
addlw   3
movwf   BANK3:FSR1
movlw   1
movwf   BANK3:FSR1H
movfw   BANK3:INDF1
movwf   byte_DATA_1C8
clrf    byte_DATA_1C9
movfw   byte_DATA_1C8
movlb   1
; assume bank = 1
movwf   byte_DATA_D6
movlb   3
; assume bank = 3
movfw   byte_DATA_1C9
movlb   1
; assume bank = 1
movwf   byte_DATA_D7
movlw   10
movwf   byte_DATA_D8
movlw   0
movwf   byte_DATA_D9
movlp   9
; assume pclath = 9
call    sub_CODE_993
movlp   1
; assume pclath = 1
b       loc_CODE_410
; assume bank = 3

loc_CODE_283:
movlb   3
movfw   byte_DATA_1E1
addlw   3
movwf   BANK3:FSR1
movlw   1
movwf   BANK3:FSR1H
movfw   BANK3:INDF1
movwf   byte_DATA_1C8
clrf    byte_DATA_1C9
movfw   byte_DATA_1C8
movlb   1
; assume bank = 1
movwf   byte_DATA_D6
movlb   3
; assume bank = 3
movfw   byte_DATA_1C9
movlb   1
; assume bank = 1
movwf   byte_DATA_D7
movlw   71 ; 'q'
movwf   byte_DATA_D8
movlw   0
movwf   byte_DATA_D9
movlp   9
; assume pclath = 9
call    sub_CODE_993
movlp   1
; assume pclath = 1
b       loc_CODE_410
; assume bank = 3

loc_CODE_29B:
movlb   3
movfw   byte_DATA_1E1
addlw   3
movwf   BANK3:FSR1
movlw   1
movwf   BANK3:FSR1H
movfw   BANK3:INDF1
movwf   byte_DATA_1C8
clrf    byte_DATA_1C9
movfw   byte_DATA_1C8
movlb   1
; assume bank = 1
movwf   byte_DATA_D6
movlb   3
; assume bank = 3
movfw   byte_DATA_1C9
movlb   1
; assume bank = 1
movwf   byte_DATA_D7
movlb   3
; assume bank = 3
movfw   byte_DATA_1E0
movwf   byte_DATA_1CA
clrf    byte_DATA_1CB
movfw   byte_DATA_1CA
movlb   1
; assume bank = 1
movwf   byte_DATA_D8
movlb   3
; assume bank = 3
movfw   byte_DATA_1CB
movlb   1
; assume bank = 1
movwf   byte_DATA_D9
movlp   9
; assume pclath = 9
call    sub_CODE_993
movlp   1
; assume pclath = 1
b       loc_CODE_410
; assume bank = 3

loc_CODE_2BA:
movlb   0
; assume bank = 0
clrf    byte_DATA_51
incf    byte_DATA_51, f
movlw   2
movlp   0A
; assume pclath = 0A
call    sub_CODE_A2D
movlp   1
; assume pclath = 1
movlb   0
movfw   byte_DATA_3C
movlb   3
; assume bank = 3
movwf   byte_DATA_1CF
movlb   0
; assume bank = 0
movfw   byte_DATA_3B
movlb   3
; assume bank = 3
movwf   byte_DATA_1CE
movlb   0
; assume bank = 0
clrf    byte_DATA_51
movlb   3
; assume bank = 3
movfw   byte_DATA_1E1
addlw   3
movwf   BANK3:FSR1
movlw   1
movwf   BANK3:FSR1H
movfw   BANK3:INDF1
movwf   byte_DATA_1C8
clrf    byte_DATA_1C9
movfw   byte_DATA_1C8
movlb   1
; assume bank = 1
movwf   byte_DATA_D6
movlb   3
; assume bank = 3
movfw   byte_DATA_1C9
movlb   1
; assume bank = 1
movwf   byte_DATA_D7
movlb   3
; assume bank = 3
movfw   byte_DATA_1CF
movlb   1
; assume bank = 1
movwf   byte_DATA_D9
movlb   3
; assume bank = 3
movfw   byte_DATA_1CE
movlb   1
; assume bank = 1
movwf   byte_DATA_D8
movlp   9
; assume pclath = 9
call    sub_CODE_993
movlp   1
; assume pclath = 1
b       loc_CODE_410
; assume bank = 3

loc_CODE_2E7:
movlb   3
movfw   byte_DATA_1E1
addlw   3
movwf   BANK3:FSR1
movlw   1
movwf   BANK3:FSR1H
movfw   BANK3:INDF1
movwf   byte_DATA_1C8
clrf    byte_DATA_1C9
movfw   byte_DATA_1C8
movlb   1
; assume bank = 1
movwf   byte_DATA_D6
movlb   3
; assume bank = 3
movfw   byte_DATA_1C9
movlb   1
; assume bank = 1
movwf   byte_DATA_D7
movfw   byte_DATA_A9
movwf   byte_DATA_D9
movfw   byte_DATA_A8
movwf   byte_DATA_D8
movlp   9
; assume pclath = 9
call    sub_CODE_993
movlp   1
; assume pclath = 1
b       loc_CODE_410
; assume bank = 3

loc_CODE_2FF:
movlb   2
; assume bank = 2
movfw   byte_DATA_124
movlb   1
; assume bank = 1
addwf   byte_DATA_EB, w
movlb   3
; assume bank = 3
movwf   byte_DATA_1D0
movlb   1
; assume bank = 1
movfw   byte_DATA_EC
addcf   byte_DATA_EC, w
movlb   3
; assume bank = 3
movwf   byte_DATA_1D1
movlb   2
; assume bank = 2
movfw   byte_DATA_125
movlb   3
; assume bank = 3
movwf   byte_DATA_1C8
clrf    byte_DATA_1C9
movfw   byte_DATA_1C8
movwf   byte_DATA_1DD
movfw   byte_DATA_1C9
movwf   byte_DATA_1DE
movlw   0
subwf   byte_DATA_1DE, w
movlw   21 ; '!'
skpnz
 subwf   byte_DATA_1DD, w
bc      loc_CODE_410
movfw   byte_DATA_1D1
movlb   0
; assume bank = 0
movwf   byte_DATA_39
movlb   3
; assume bank = 3
movfw   byte_DATA_1D0
movlb   0
; assume bank = 0
movwf   byte_DATA_38
movlw   25 ; '%'
movwf   byte_DATA_3A
movlw   1
movwf   byte_DATA_3B
movlb   3
; assume bank = 3
movfw   byte_DATA_1DE
movwf   byte_DATA_1C9
movfw   byte_DATA_1DD
movwf   byte_DATA_1C8
lsrf    byte_DATA_1C9, f
rrf     byte_DATA_1C8, f
movfw   byte_DATA_1C8
movlb   0
; assume bank = 0
movwf   byte_DATA_3C
movlb   3
; assume bank = 3
movfw   byte_DATA_1C9
movlb   0
; assume bank = 0
movwf   byte_DATA_3D
movlp   0B
; assume pclath = 0B
call    sub_CODE_B80
movlp   1
; assume pclath = 1
movlw   24 ; '$'
movlb   0
movwf   byte_DATA_3D
movlw   1
movwf   byte_DATA_3E
movlb   3
; assume bank = 3
movfw   byte_DATA_1DD
addlw   1
movwf   byte_DATA_1C8
movfw   byte_DATA_1C8
movlb   0
; assume bank = 0
movwf   byte_DATA_3F
movlb   3
; assume bank = 3
movfw   byte_DATA_1E1
addlw   3
movwf   BANK3:FSR1
movlw   1
movwf   BANK3:FSR1H
movfw   BANK3:INDF1
movlp   0D
; assume pclath = 0D
call    sub_CODE_DEE
movlp   1
; assume pclath = 1
b       loc_CODE_410

loc_CODE_34E:
movlb   2
; assume bank = 2
movfw   byte_DATA_125
movlb   3
; assume bank = 3
movwf   byte_DATA_1C8
clrf    byte_DATA_1C9
movfw   byte_DATA_1C8
movwf   byte_DATA_1C9
clrf    byte_DATA_1C8
movlb   2
; assume bank = 2
movfw   byte_DATA_124
movlb   3
; assume bank = 3
addwf   byte_DATA_1C8, w
movwf   byte_DATA_1CC
movfw   byte_DATA_1C9
addcf   byte_DATA_1C9, w
movwf   byte_DATA_1CD
movfw   byte_DATA_1CC
movwf   byte_DATA_1C8
movfw   byte_DATA_1C8
movwf   byte_DATA_1E0
movfw   byte_DATA_1E0
movlp   0C
; assume pclath = 0C
call    sub_CODE_C80
movlp   1
; assume pclath = 1
movlb   3
movfw   byte_DATA_1E1
addlw   3
movwf   BANK3:FSR1
movlw   1
movwf   BANK3:FSR1H
movfw   BANK3:INDF1
movwf   byte_DATA_1C8
clrf    byte_DATA_1C9
movfw   byte_DATA_1C8
movlb   1
; assume bank = 1
movwf   byte_DATA_D6
movlb   3
; assume bank = 3
movfw   byte_DATA_1C9
movlb   1
; assume bank = 1
movwf   byte_DATA_D7
movlb   3
; assume bank = 3
movfw   byte_DATA_1E0
movwf   byte_DATA_1CA
clrf    byte_DATA_1CB
movfw   byte_DATA_1CA
movlb   1
; assume bank = 1
movwf   byte_DATA_D8
movlb   3
; assume bank = 3
movfw   byte_DATA_1CB
movlb   1
; assume bank = 1
movwf   byte_DATA_D9
movlp   9
; assume pclath = 9
call    sub_CODE_993
movlp   1
; assume pclath = 1
b       loc_CODE_410
; assume bank = 3

loc_CODE_386:
movlb   2
; assume bank = 2
movfw   byte_DATA_124
movlb   1
; assume bank = 1
addwf   byte_DATA_EB, w
movlb   3
; assume bank = 3
movwf   byte_DATA_1D2
movlb   1
; assume bank = 1
movfw   byte_DATA_EC
addcf   byte_DATA_EC, w
movlb   3
; assume bank = 3
movwf   byte_DATA_1D3
movlb   1
; assume bank = 1
movfw   byte_DATA_A4
addlw   0FF
movlb   3
; assume bank = 3
movwf   byte_DATA_1D4
movlw   0FF
movlb   1
; assume bank = 1
addwfc  byte_DATA_A5, w
movlb   3
; assume bank = 3
movwf   byte_DATA_1D5
movfw   byte_DATA_1D3
movlb   1
; assume bank = 1
movwf   byte_DATA_CE
movlb   3
; assume bank = 3
movfw   byte_DATA_1D2
movlb   1
; assume bank = 1
movwf   byte_DATA_CD
movlw   25 ; '%'
movwf   byte_DATA_CF
movlw   1
movwf   byte_DATA_D0
movlb   3
; assume bank = 3
movfw   byte_DATA_1D5
movwf   byte_DATA_1C9
movfw   byte_DATA_1D4
movwf   byte_DATA_1C8
lsrf    byte_DATA_1C9, f
rrf     byte_DATA_1C8, f
movfw   byte_DATA_1C8
movlb   1
; assume bank = 1
movwf   byte_DATA_D1
movlb   3
; assume bank = 3
movfw   byte_DATA_1C9
movlb   1
; assume bank = 1
movwf   byte_DATA_D2
movlp   0E
; assume pclath = 0E
call    sub_CODE_E74
movlp   1
; assume pclath = 1
movlb   3
; assume bank = 3
movfw   byte_DATA_1D6
bz      loc_CODE_3D7
movlw   2
movwf   byte_DATA_1C8
movfw   byte_DATA_1C8
movlb   2
; assume bank = 2
movwf   byte_DATA_125
movlw   24 ; '$'
movlb   0
; assume bank = 0
movwf   byte_DATA_3D
movlw   1
movwf   byte_DATA_3E
movlw   2
movlb   3
; assume bank = 3
movwf   byte_DATA_1C8
movfw   byte_DATA_1C8
movlb   0
; assume bank = 0
movwf   byte_DATA_3F
movlb   3
; assume bank = 3
movfw   byte_DATA_1E1
addlw   3
movwf   BANK3:FSR1
movlw   1
movwf   BANK3:FSR1H
movfw   BANK3:INDF1
movlp   0D
; assume pclath = 0D
call    sub_CODE_DEE
movlp   1
; assume pclath = 1
b       loc_CODE_410

loc_CODE_3D7:
movlb   2
; assume bank = 2
clrf    byte_DATA_125
incf    byte_DATA_125, f
movlw   24 ; '$'
movlb   0
; assume bank = 0
movwf   byte_DATA_3D
movlw   1
movwf   byte_DATA_3E
movlw   2
movlb   3
; assume bank = 3
movwf   byte_DATA_1C8
movfw   byte_DATA_1C8
movlb   0
; assume bank = 0
movwf   byte_DATA_3F
movlb   3
; assume bank = 3
movfw   byte_DATA_1E1
addlw   3
movwf   BANK3:FSR1
movlw   1
movwf   BANK3:FSR1H
movfw   BANK3:INDF1
movlp   0D
; assume pclath = 0D
call    sub_CODE_DEE
movlp   1
; assume pclath = 1
b       loc_CODE_410
; assume bank = 1

loc_CODE_3F0:
movlb   3
; assume bank = 3
movfw   byte_DATA_1E1
addlw   3
movwf   BANK3:FSR1
movlw   1
movwf   BANK3:FSR1H
movfw   BANK3:INDF1
xorlw   1
bz      loc_CODE_26B
xorlw   3
bz      loc_CODE_283
xorlw   1
bz      loc_CODE_29B
xorlw   7
bz      loc_CODE_2BA
xorlw   1
bz      loc_CODE_2E7
xorlw   3
bz      loc_CODE_2FF
xorlw   85
bz      loc_CODE_34E
xorlw   5
bz      loc_CODE_386
b       loc_CODE_410

loc_CODE_410:
movlb   1
; assume bank = 1
clrf    byte_DATA_B3

loc_CODE_412:
movlb   0
; assume bank = 0
btfsc   BANK0:PORTC, RC4
 b       loc_CODE_4FF
movlb   1
; assume bank = 1
movfw   byte_DATA_C8
skpnz
 movfw   byte_DATA_CA
bz      loc_CODE_41E
clrf    byte_DATA_AA
clrf    byte_DATA_AB
b       loc_CODE_428

loc_CODE_41E:
movfw   byte_DATA_C9
bz      loc_CODE_428
movfw   byte_DATA_CB
bz      loc_CODE_428
movlw   1
movwf   byte_DATA_AA
movlw   0
movwf   byte_DATA_AB

loc_CODE_428:
movlw   1
subwf   byte_DATA_AD, w
movlw   28 ; '('
skpnz
 subwf   byte_DATA_AC, w
bnc     loc_CODE_502
movlw   1
subwf   byte_DATA_AF, w
movlw   28 ; '('
skpnz
 subwf   byte_DATA_AE, w
bnc     loc_CODE_502
movlb   3
; assume bank = 3
movfw   byte_DATA_1DC
iorwf   byte_DATA_1DB, w
iorwf   byte_DATA_1DA, w
iorwf   byte_DATA_1D9, w
bnz     loc_CODE_46D
movlb   1
; assume bank = 1
movfw   byte_DATA_A3
movlb   3
; assume bank = 3
movwf   byte_DATA_1DC
movlb   1
; assume bank = 1
movfw   byte_DATA_A2
movlb   3
; assume bank = 3
movwf   byte_DATA_1DB
movlb   1
; assume bank = 1
movfw   byte_DATA_A1
movlb   3
; assume bank = 3
movwf   byte_DATA_1DA
movlb   1
; assume bank = 1
movfw   byte_DATA_A0
movlb   3
; assume bank = 3
movwf   byte_DATA_1D9
movlw   0DB
movlb   1
; assume bank = 1
movwf   byte_DATA_CD
movlw   0F
movwf   byte_DATA_CE
movlw   0C6
movwf   byte_DATA_CF
movlw   0
movwf   byte_DATA_D0
movlw   1
movwf   byte_DATA_D1
movlw   0
movwf   byte_DATA_D2
movlp   0E
; assume pclath = 0E
call    sub_CODE_E74
movlp   1
; assume pclath = 1
movlw   0FB
movlb   1
movwf   byte_DATA_CD
movlw   0F
movwf   byte_DATA_CE
movlw   0C6
movwf   byte_DATA_CF
movlw   0
movwf   byte_DATA_D0
movlw   1
movwf   byte_DATA_D1
movlw   0
movwf   byte_DATA_D2
movlp   0E
; assume pclath = 0E
call    sub_CODE_E74
movlp   1
; assume bank = 3
; assume pclath = 1

loc_CODE_46D:
movlb   1
; assume bank = 1
movfw   byte_DATA_A3
movlb   0
; assume bank = 0
movwf   byte_DATA_3B
movlb   1
; assume bank = 1
movfw   byte_DATA_A2
movlb   0
; assume bank = 0
movwf   byte_DATA_3A
movlb   1
; assume bank = 1
movfw   byte_DATA_A1
movlb   0
; assume bank = 0
movwf   byte_DATA_39
movlb   1
; assume bank = 1
movfw   byte_DATA_A0
movlb   0
; assume bank = 0
movwf   byte_DATA_38
movlb   3
; assume bank = 3
movfw   byte_DATA_1DC
movlb   0
; assume bank = 0
movwf   byte_DATA_3F
movlb   3
; assume bank = 3
movfw   byte_DATA_1DB
movlb   0
; assume bank = 0
movwf   byte_DATA_3E
movlb   3
; assume bank = 3
movfw   byte_DATA_1DA
movlb   0
; assume bank = 0
movwf   byte_DATA_3D
movlb   3
; assume bank = 3
movfw   byte_DATA_1D9
movlb   0
; assume bank = 0
movwf   byte_DATA_3C
movlp   6
; assume pclath = 6
call    sub_CODE_6AA
movlp   1
; assume pclath = 1
movlb   0
movfw   byte_DATA_3B
bnz     loc_CODE_49E
movfw   byte_DATA_3A
bnz     loc_CODE_49E
movfw   byte_DATA_39
bnz     loc_CODE_49E
movlw   64 ; 'd'
subwf   byte_DATA_38, w
bnc     loc_CODE_502

loc_CODE_49E:
movlb   3
; assume bank = 3
movfw   byte_DATA_1DF
bz      loc_CODE_4A4
movlw   0DA
b       loc_CODE_4A5

loc_CODE_4A4:
movlw   0FA

loc_CODE_4A5:
movwf   byte_DATA_1D7
movlw   0F
movwf   byte_DATA_1D8
comf    byte_DATA_1DF, f
movlb   1
; assume bank = 1
incf    byte_DATA_C4, w
movlw   3F ; '?'
skpnz
 xorwf   byte_DATA_C5, w
bnz     loc_CODE_4D7
movlw   1
addwf   byte_DATA_C6, f
movlw   0
addwfc  byte_DATA_C7, f
movlw   0DB
movwf   byte_DATA_CD
movlw   0F
movwf   byte_DATA_CE
movlw   0C6
movwf   byte_DATA_CF
movlw   0
movwf   byte_DATA_D0
movlw   1
movwf   byte_DATA_D1
movlw   0
movwf   byte_DATA_D2
movlp   0E
; assume pclath = 0E
call    sub_CODE_E74
movlp   1
; assume pclath = 1
movlw   0FB
movlb   1
movwf   byte_DATA_CD
movlw   0F
movwf   byte_DATA_CE
movlw   0C6
movwf   byte_DATA_CF
movlw   0
movwf   byte_DATA_D0
movlw   1
movwf   byte_DATA_D1
movlw   0
movwf   byte_DATA_D2
movlp   0E
; assume pclath = 0E
call    sub_CODE_E74
movlp   1
; assume pclath = 1
movlb   1
clrf    byte_DATA_C4
clrf    byte_DATA_C5
b       loc_CODE_4DB

loc_CODE_4D7:
movlw   1
addwf   byte_DATA_C4, f
movlw   0
addwfc  byte_DATA_C5, f

loc_CODE_4DB:
movlb   3
; assume bank = 3
movfw   byte_DATA_1D8
movlb   1
; assume bank = 1
movwf   byte_DATA_CE
movlb   3
; assume bank = 3
movfw   byte_DATA_1D7
movlb   1
; assume bank = 1
movwf   byte_DATA_CD
movlw   0C4
movwf   byte_DATA_CF
movlw   0
movwf   byte_DATA_D0
movlw   1
movwf   byte_DATA_D1
movlw   0
movwf   byte_DATA_D2
movlp   0E
; assume pclath = 0E
call    sub_CODE_E74
movlp   1
; assume pclath = 1
movlb   1
movfw   byte_DATA_A3
movlb   3
; assume bank = 3
movwf   byte_DATA_1DC
movlb   1
; assume bank = 1
movfw   byte_DATA_A2
movlb   3
; assume bank = 3
movwf   byte_DATA_1DB
movlb   1
; assume bank = 1
movfw   byte_DATA_A1
movlb   3
; assume bank = 3
movwf   byte_DATA_1DA
movlb   1
; assume bank = 1
movfw   byte_DATA_A0
movlb   3
; assume bank = 3
movwf   byte_DATA_1D9
b       loc_CODE_502
; assume bank = 0

loc_CODE_4FF:
movlb   1
; assume bank = 1
clrf    byte_DATA_AA
clrf    byte_DATA_AB
; assume bank = 3

loc_CODE_502:
movlb   1
; assume bank = 1
movfw   byte_DATA_AB
xorwf   byte_DATA_A9, w
bnz     loc_CODE_509
movfw   byte_DATA_AA
xorwf   byte_DATA_A8, w

loc_CODE_509:
bz      loc_CODE_51B
decf    byte_DATA_AA, w
iorwf   byte_DATA_AB, w
bnz     loc_CODE_513
movlp   9
; assume pclath = 9
call    sub_CODE_940
movlp   1
; assume pclath = 1
b       loc_CODE_516

loc_CODE_513:
movlp   9
; assume pclath = 9
call    sub_CODE_918
movlp   1
; assume pclath = 1

loc_CODE_516:
movlb   1
movfw   byte_DATA_AB
movwf   byte_DATA_A9
movfw   byte_DATA_AA
movwf   byte_DATA_A8

loc_CODE_51B:
movfw   byte_DATA_B2
bz      loc_CODE_264
movfw   byte_DATA_B0
xorwf   byte_DATA_B1, w
bnz     loc_CODE_264
movlw   5
movlb   3
; assume bank = 3
movwf   byte_DATA_1CA
movlw   0F
movwf   byte_DATA_1C9
movlw   0F4
movwf   byte_DATA_1C8

loc_CODE_529:
decfsz  byte_DATA_1C8, f
 b       loc_CODE_529
decfsz  byte_DATA_1C9, f
 b       loc_CODE_529
decfsz  byte_DATA_1CA, f
 b       loc_CODE_529
movlb   1
; assume bank = 1
movfw   byte_DATA_A7
movlb   0
; assume bank = 0
movwf   byte_DATA_39
movlb   1
; assume bank = 1
movfw   byte_DATA_A6
movlb   0
; assume bank = 0
movwf   byte_DATA_38
movlp   0A
; assume pclath = 0A
call    sub_CODE_A64
movlp   1
; assume pclath = 1
movlb   1
; assume bank = 1
clrf    byte_DATA_B2
b       loc_CODE_264
; END OF FUNCTION CHUNK FOR RESET
; assume bank = 4
; assume pclath = 5



sub_CODE_53D:
movlb   0
; assume bank = 0
movwf   byte_DATA_22
movlw   20 ; ' '
movwf   byte_DATA_7A
movfw   byte_DATA_7A
movwf   byte_DATA_23
movlb   1
; assume bank = 1
movfw   byte_DATA_B3
bnz     loc_CODE_57B
movlb   0
; assume bank = 0
movfw   byte_DATA_46
iorwf   byte_DATA_47, w
bnz     loc_CODE_55E
movlw   55 ; 'U'
xorwf   byte_DATA_22, w
bnz     loc_CODE_55E
movfw   byte_DATA_22
movwf   byte_DATA_7A
movfw   byte_DATA_46
addlw   20 ; ' '
movwf   BANK0:FSR1
movlw   1
movwf   BANK0:FSR1H
movfw   byte_DATA_7A
movwf   BANK0:INDF1
movlw   1
addwf   byte_DATA_46, f
movlw   0
addwfc  byte_DATA_47, f
return

loc_CODE_55E:
decf    byte_DATA_46, w
iorwf   byte_DATA_47, w
bnz     loc_CODE_577
movlw   0AA
xorwf   byte_DATA_22, w
bnz     loc_CODE_577
movfw   byte_DATA_22
movwf   byte_DATA_7A
movfw   byte_DATA_46
addlw   20 ; ' '
movwf   BANK0:FSR1
movlw   1
movwf   BANK0:FSR1H
movfw   byte_DATA_7A
movwf   BANK0:INDF1
movlw   1
addwf   byte_DATA_46, f
movlw   0
addwfc  byte_DATA_47, f
movlb   1
; assume bank = 1
clrf    byte_DATA_B3
incf    byte_DATA_B3, f
return
; assume bank = 0

loc_CODE_577:
movlb   0
clrf    byte_DATA_46
clrf    byte_DATA_47
return
; assume bank = 1

loc_CODE_57B:
movlb   1
decf    byte_DATA_B3, w
skpz
 return
movlb   0
; assume bank = 0
movfw   byte_DATA_22
movwf   byte_DATA_7A
movfw   byte_DATA_46
addlw   20 ; ' '
movwf   BANK0:FSR1
movlw   1
movwf   BANK0:FSR1H
movfw   byte_DATA_7A
movwf   BANK0:INDF1
movlw   1
addwf   byte_DATA_46, f
movlw   0
addwfc  byte_DATA_47, f
movlw   0
subwf   byte_DATA_47, w
movlw   5
skpnz
 subwf   byte_DATA_46, w
skpc
 return
movfw   byte_DATA_23
addlw   2
movwf   BANK0:FSR1
movlw   1
movwf   BANK0:FSR1H
movfw   BANK0:INDF1
addlw   2
movwf   byte_DATA_7A
movlw   0
skpnc
 movlw   1
movwf   byte_DATA_7B
movfw   byte_DATA_7B
xorlw   80
movwf   byte_DATA_7C
movlw   80
subwf   byte_DATA_7C, w
bnz     loc_CODE_5A9
movlw   29 ; ')'
subwf   byte_DATA_7A, w

loc_CODE_5A9:
bnc     loc_CODE_5B0
movlb   1
; assume bank = 1
clrf    byte_DATA_B3
movlb   0
; assume bank = 0
clrf    byte_DATA_46
clrf    byte_DATA_47

loc_CODE_5B0:
movlb   0
movfw   byte_DATA_23
addlw   2
movwf   BANK0:FSR1
movlw   1
movwf   BANK0:FSR1H
movfw   BANK0:INDF1
addlw   2
movwf   byte_DATA_7A
movlw   0
skpnc
 movlw   1
movwf   byte_DATA_7B
movfw   byte_DATA_47
xorwf   byte_DATA_7B, w
bnz     loc_CODE_5C3
movfw   byte_DATA_46
xorwf   byte_DATA_7A, w

loc_CODE_5C3:
skpz
 return
movfw   byte_DATA_23
addlw   2
movwf   BANK0:FSR1
movlw   1
movwf   BANK0:FSR1H
movfw   BANK0:INDF1
addlw   0FE
movwf   byte_DATA_70
movlw   0FF
skpnc
 movlw   0
movwf   byte_DATA_71
movfw   byte_DATA_23
addlw   2
movlp   0A
; assume pclath = 0A
call    sub_CODE_AEA
movlp   5
; assume pclath = 5
movfw   byte_DATA_71
movlb   0
movwf   byte_DATA_21
movfw   byte_DATA_70
movwf   byte_DATA_20
movfw   byte_DATA_23
addlw   2
movwf   BANK0:FSR1
movlw   1
movwf   BANK0:FSR1H
movfw   BANK0:INDF1
addlw   20 ; ' '
movwf   BANK0:FSR1
movlw   1
movwf   BANK0:FSR1H
moviw   0[FSR1]
movwf   byte_DATA_7A
moviw   1[FSR1]
movwf   byte_DATA_7B
movfw   byte_DATA_21
xorwf   byte_DATA_7B, w
bnz     loc_CODE_5EF
movfw   byte_DATA_20
xorwf   byte_DATA_7A, w

loc_CODE_5EF:
bnz     loc_CODE_608
movlw   2
movwf   byte_DATA_7A
movfw   byte_DATA_7A
movlb   1
; assume bank = 1
movwf   byte_DATA_B3
movlb   0
; assume bank = 0
movfw   byte_DATA_23
addlw   2
movwf   BANK0:FSR1
movlw   1
movwf   BANK0:FSR1H
movfw   BANK0:INDF1
addlw   0FC
movlb   1
; assume bank = 1
movwf   byte_DATA_A4
movlw   0FF
skpnc
 movlw   0
movwf   byte_DATA_A5
movlb   0
; assume bank = 0
clrf    byte_DATA_46
clrf    byte_DATA_47
return

loc_CODE_608:
movlb   1
; assume bank = 1
clrf    byte_DATA_B3
movlb   0
; assume bank = 0
clrf    byte_DATA_46
clrf    byte_DATA_47
return
; End of function sub_CODE_53D

; assume bank = 1
; assume pclath = 6



sub_CODE_60E:
movlb   1
movwf   byte_DATA_DE
movlp   9
; assume pclath = 9
call    sub_CODE_91E
movlp   6
; assume pclath = 6
movlb   0
; assume bank = 0
movfw   byte_DATA_39
movlb   1
; assume bank = 1
movwf   byte_DATA_DD
movlb   0
; assume bank = 0
movfw   byte_DATA_38
movlb   1
; assume bank = 1
movwf   byte_DATA_DC
movlw   0A8
subwf   byte_DATA_DE, w
bnc     loc_CODE_622
clrf    byte_DATA_DA
clrf    byte_DATA_DB
b       loc_CODE_6A5

loc_CODE_622:
movfw   byte_DATA_DE
bnz     loc_CODE_629
movfw   byte_DATA_DD
movwf   byte_DATA_DB
movfw   byte_DATA_DC
b       loc_CODE_6A4

loc_CODE_629:
movfw   byte_DATA_DE
movwf   byte_DATA_D4
clrf    byte_DATA_D5
comf    byte_DATA_D4, f
comf    byte_DATA_D5, f
incf    byte_DATA_D4, f
skpnz
 incf    byte_DATA_D5, f
movfw   byte_DATA_D4
addlw   0A7
movwf   byte_DATA_DF
movlw   0
addwfc  byte_DATA_D5, w
movwf   byte_DATA_E0
clrf    byte_DATA_E1
btfsc   byte_DATA_E0, 7
 decf    byte_DATA_E1, f
movfw   byte_DATA_E1
movwf   byte_DATA_E2
movfw   byte_DATA_DC
movlb   0
; assume bank = 0
movwf   byte_DATA_38
movlb   1
; assume bank = 1
movfw   byte_DATA_DD
movlb   0
; assume bank = 0
movwf   byte_DATA_39
clrf    byte_DATA_3A
clrf    byte_DATA_3B
movlb   1
; assume bank = 1
movfw   byte_DATA_E2
movlb   0
; assume bank = 0
movwf   byte_DATA_3F
movlb   1
; assume bank = 1
movfw   byte_DATA_E1
movlb   0
; assume bank = 0
movwf   byte_DATA_3E
movlb   1
; assume bank = 1
movfw   byte_DATA_E0
movlb   0
; assume bank = 0
movwf   byte_DATA_3D
movlb   1
; assume bank = 1
movfw   byte_DATA_DF
movlb   0
; assume bank = 0
movwf   byte_DATA_3C
movlp   0B
; assume pclath = 0B
call    sub_CODE_BB8
movlp   6
; assume pclath = 6
movlb   0
movfw   byte_DATA_3B
movlb   1
; assume bank = 1
movwf   byte_DATA_E2
movlb   0
; assume bank = 0
movfw   byte_DATA_3A
movlb   1
; assume bank = 1
movwf   byte_DATA_E1
movlb   0
; assume bank = 0
movfw   byte_DATA_39
movlb   1
; assume bank = 1
movwf   byte_DATA_E0
movlb   0
; assume bank = 0
movfw   byte_DATA_38
movlb   1
; assume bank = 1
movwf   byte_DATA_DF
movlw   0
movwf   byte_DATA_D9
movlw   0
movwf   byte_DATA_D8
movlw   0
movwf   byte_DATA_D7
movlw   0A7
movwf   byte_DATA_D6
movfw   byte_DATA_D9
movlb   0
; assume bank = 0
movwf   byte_DATA_3B
movlb   1
; assume bank = 1
movfw   byte_DATA_D8
movlb   0
; assume bank = 0
movwf   byte_DATA_3A
movlb   1
; assume bank = 1
movfw   byte_DATA_D7
movlb   0
; assume bank = 0
movwf   byte_DATA_39
movlb   1
; assume bank = 1
movfw   byte_DATA_D6
movlb   0
; assume bank = 0
movwf   byte_DATA_38
movlb   1
; assume bank = 1
movfw   byte_DATA_E2
movlb   0
; assume bank = 0
movwf   byte_DATA_3F
movlb   1
; assume bank = 1
movfw   byte_DATA_E1
movlb   0
; assume bank = 0
movwf   byte_DATA_3E
movlb   1
; assume bank = 1
movfw   byte_DATA_E0
movlb   0
; assume bank = 0
movwf   byte_DATA_3D
movlb   1
; assume bank = 1
movfw   byte_DATA_DF
movlb   0
; assume bank = 0
movwf   byte_DATA_3C
movlp   0D
; assume pclath = 0D
call    sub_CODE_D1D
movlb   0
movfw   byte_DATA_3B
movlb   1
; assume bank = 1
movwf   byte_DATA_E2
movlb   0
; assume bank = 0
movfw   byte_DATA_3A
movlb   1
; assume bank = 1
movwf   byte_DATA_E1
movlb   0
; assume bank = 0
movfw   byte_DATA_39
movlb   1
; assume bank = 1
movwf   byte_DATA_E0
movlb   0
; assume bank = 0
movfw   byte_DATA_38
movlb   1
; assume bank = 1
movwf   byte_DATA_DF
movfw   byte_DATA_E0
movwf   byte_DATA_DB
movfw   byte_DATA_DF
; assume pclath = 6

loc_CODE_6A4:
movwf   byte_DATA_DA

loc_CODE_6A5:
movfw   byte_DATA_DB
movwf   byte_DATA_D3
movfw   byte_DATA_DA
movwf   byte_DATA_D2
return
; End of function sub_CODE_60E

; assume bank = 0



sub_CODE_6AA:
movlw   0
movlb   1
; assume bank = 1
movwf   byte_DATA_D7
movlw   0
movwf   byte_DATA_D6
movlw   0
movwf   byte_DATA_D5
movlw   0
movwf   byte_DATA_D4
movlb   0
; assume bank = 0
movfw   byte_DATA_3F
subwf   byte_DATA_3B, w
bnz     loc_CODE_6C2
movfw   byte_DATA_3E
subwf   byte_DATA_3A, w
bnz     loc_CODE_6C2
movfw   byte_DATA_3D
subwf   byte_DATA_39, w
bnz     loc_CODE_6C2
movfw   byte_DATA_3C
subwf   byte_DATA_38, w

loc_CODE_6C2:
bnc     loc_CODE_6FB
movfw   byte_DATA_38
movlb   1
; assume bank = 1
movwf   byte_DATA_CC
movlb   0
; assume bank = 0
movfw   byte_DATA_39
movlb   1
; assume bank = 1
movwf   byte_DATA_CD
movlb   0
; assume bank = 0
movfw   byte_DATA_3A
movlb   1
; assume bank = 1
movwf   byte_DATA_CE
movlb   0
; assume bank = 0
movfw   byte_DATA_3B
movlb   1
; assume bank = 1
movwf   byte_DATA_CF
movlb   0
; assume bank = 0
comf    byte_DATA_3C, w
movlb   1
; assume bank = 1
movwf   byte_DATA_D0
movlb   0
; assume bank = 0
comf    byte_DATA_3D, w
movlb   1
; assume bank = 1
movwf   byte_DATA_D1
movlb   0
; assume bank = 0
comf    byte_DATA_3E, w
movlb   1
; assume bank = 1
movwf   byte_DATA_D2
movlb   0
; assume bank = 0
comf    byte_DATA_3F, w
movlb   1
; assume bank = 1
movwf   byte_DATA_D3
incf    byte_DATA_D0, f
skpnz
 incf    byte_DATA_D1, f
skpnz
 incf    byte_DATA_D2, f
skpnz
 incf    byte_DATA_D3, f
movfw   byte_DATA_D0
addwf   byte_DATA_CC, f
movfw   byte_DATA_D1
addwfc  byte_DATA_CD, f
movfw   byte_DATA_D2
addwfc  byte_DATA_CE, f
movfw   byte_DATA_D3
addwfc  byte_DATA_CF, f
movfw   byte_DATA_CF
movwf   byte_DATA_D7
movfw   byte_DATA_CE
movwf   byte_DATA_D6
movfw   byte_DATA_CD
movwf   byte_DATA_D5
movfw   byte_DATA_CC
movwf   byte_DATA_D4
b       loc_CODE_736
; assume bank = 0

loc_CODE_6FB:
movlb   0
movfw   byte_DATA_38
movlb   1
; assume bank = 1
movwf   byte_DATA_CC
movlb   0
; assume bank = 0
movfw   byte_DATA_39
movlb   1
; assume bank = 1
movwf   byte_DATA_CD
movlb   0
; assume bank = 0
movfw   byte_DATA_3A
movlb   1
; assume bank = 1
movwf   byte_DATA_CE
movlb   0
; assume bank = 0
movfw   byte_DATA_3B
movlb   1
; assume bank = 1
movwf   byte_DATA_CF
movlb   0
; assume bank = 0
comf    byte_DATA_3C, w
movlb   1
; assume bank = 1
movwf   byte_DATA_D0
movlb   0
; assume bank = 0
comf    byte_DATA_3D, w
movlb   1
; assume bank = 1
movwf   byte_DATA_D1
movlb   0
; assume bank = 0
comf    byte_DATA_3E, w
movlb   1
; assume bank = 1
movwf   byte_DATA_D2
movlb   0
; assume bank = 0
comf    byte_DATA_3F, w
movlb   1
; assume bank = 1
movwf   byte_DATA_D3
incf    byte_DATA_D0, f
skpnz
 incf    byte_DATA_D1, f
skpnz
 incf    byte_DATA_D2, f
skpnz
 incf    byte_DATA_D3, f
movfw   byte_DATA_D0
addwf   byte_DATA_CC, f
movfw   byte_DATA_D1
addwfc  byte_DATA_CD, f
movfw   byte_DATA_D2
addwfc  byte_DATA_CE, f
movfw   byte_DATA_D3
addwfc  byte_DATA_CF, f
movlw   0FF
addwf   byte_DATA_CC, w
movwf   byte_DATA_D4
movlw   0FF
addwfc  byte_DATA_CD, w
movwf   byte_DATA_D5
movlw   0FF
addwfc  byte_DATA_CE, w
movwf   byte_DATA_D6
movlw   0FF
addwfc  byte_DATA_CF, w
movwf   byte_DATA_D7

loc_CODE_736:
movfw   byte_DATA_D7
movlb   0
; assume bank = 0
movwf   byte_DATA_3B
movlb   1
; assume bank = 1
movfw   byte_DATA_D6
movlb   0
; assume bank = 0
movwf   byte_DATA_3A
movlb   1
; assume bank = 1
movfw   byte_DATA_D5
movlb   0
; assume bank = 0
movwf   byte_DATA_39
movlb   1
; assume bank = 1
movfw   byte_DATA_D4
movlb   0
; assume bank = 0
movwf   byte_DATA_38
return
; End of function sub_CODE_6AA

; assume pclath = 7



sub_CODE_746:
movlb   0
movfw   byte_DATA_22
movwf   BANK0:FSR1
clrf    BANK0:FSR1H
lslf    BANK0:INDF1, w
addwf   byte_DATA_23, w
movwf   byte_DATA_27
movfw   byte_DATA_27
movwf   BANK0:FSR1
movlw   1
movwf   BANK0:FSR1H
moviw   0[FSR1]
movwf   byte_DATA_28
moviw   1[FSR1]
movwf   byte_DATA_29
movfw   byte_DATA_28
movwf   byte_DATA_2A
movfw   byte_DATA_29
movwf   byte_DATA_2B
clrf    byte_DATA_2C
clrf    byte_DATA_2D
movfw   byte_DATA_24
movwf   BANK0:FSR1
clrf    BANK0:FSR1H
movfw   byte_DATA_2A
subwf   BANK0:INDF1, f
addfsr  FSR1, 1
movfw   byte_DATA_2B
subwfb  BANK0:INDF1, f
addfsr  FSR1, 1
movfw   byte_DATA_2C
subwfb  BANK0:INDF1, f
addfsr  FSR1, 1
movfw   byte_DATA_2D
subwfb  BANK0:INDF1, f
addfsr  FSR1, 0FD
movfw   byte_DATA_22
movwf   BANK0:FSR1
clrf    BANK0:FSR1H
lslf    BANK0:INDF1, w
addwf   byte_DATA_23, w
movwf   byte_DATA_27
movfw   byte_DATA_27
movwf   BANK0:FSR1
movlw   1
movwf   BANK0:FSR1H
movfw   byte_DATA_20
movwi   0[FSR1]
movfw   byte_DATA_21
movwi   1[FSR1]
movfw   byte_DATA_20
movwf   byte_DATA_27
movfw   byte_DATA_21
movwf   byte_DATA_28
clrf    byte_DATA_29
clrf    byte_DATA_2A
movfw   byte_DATA_24
movwf   BANK0:FSR1
clrf    BANK0:FSR1H
movfw   byte_DATA_27
addwf   BANK0:INDF1, f
addfsr  FSR1, 1
movfw   byte_DATA_28
addwfc  BANK0:INDF1, f
addfsr  FSR1, 1
movfw   byte_DATA_29
addwfc  BANK0:INDF1, f
addfsr  FSR1, 1
movfw   byte_DATA_2A
addwfc  BANK0:INDF1, f
movlw   1
movwf   byte_DATA_27
movfw   byte_DATA_22
movwf   BANK0:FSR1
clrf    BANK0:FSR1H
movfw   byte_DATA_27
addwf   BANK0:INDF1, f
movfw   byte_DATA_22
movwf   BANK0:FSR1
clrf    BANK0:FSR1H
movlw   0A
subwf   BANK0:INDF1, w
bnc     loc_CODE_79E
movfw   byte_DATA_22
movwf   BANK0:FSR1
clrf    BANK0:FSR1H
clrf    BANK0:INDF1

loc_CODE_79E:
movlw   0
movwf   byte_DATA_73
movlw   0
movwf   byte_DATA_72
movlw   0
movwf   byte_DATA_71
movlw   0A
movwf   byte_DATA_70
movfw   byte_DATA_24
movwf   BANK0:FSR1
clrf    BANK0:FSR1H
moviw   0[FSR1]
movwf   byte_DATA_74
moviw   1[FSR1]
movwf   byte_DATA_75
moviw   2[FSR1]
movwf   byte_DATA_76
moviw   3[FSR1]
movwf   byte_DATA_77
movlp   0C
; assume pclath = 0C
call    sub_CODE_CCB
movlp   7
; assume pclath = 7
movfw   byte_DATA_71
movlb   0
movwf   byte_DATA_2F
movfw   byte_DATA_70
movwf   byte_DATA_2E
movlw   2
subwf   byte_DATA_2F, w
movlw   0C8
skpnz
 subwf   byte_DATA_2E, w
bnc     loc_CODE_7C6
movfw   byte_DATA_25
movwf   BANK0:FSR1
clrf    BANK0:FSR1H
clrf    BANK0:INDF1
incf    BANK0:INDF1, f
return

loc_CODE_7C6:
movlw   1
subwf   byte_DATA_2F, w
movlw   75 ; 'u'
skpnz
 subwf   byte_DATA_2E, w
bc      loc_CODE_7D3
movfw   byte_DATA_26
movwf   BANK0:FSR1
clrf    BANK0:FSR1H
clrf    BANK0:INDF1
incf    BANK0:INDF1, f
return

loc_CODE_7D3:
movfw   byte_DATA_26
movwf   BANK0:FSR1
clrf    BANK0:FSR1H
clrf    BANK0:INDF1
movfw   byte_DATA_25
movwf   BANK0:FSR1
clrf    BANK0:FSR1H
clrf    BANK0:INDF1
return
; End of function sub_CODE_746




sub_CODE_7DC:
movwf   byte_DATA_71
movlb   0
movfw   byte_DATA_49
xorlw   80
movwf   byte_DATA_70
movfw   byte_DATA_4B
xorlw   80
subwf   byte_DATA_70, w
bnz     loc_CODE_7E8
movfw   byte_DATA_4A
subwf   byte_DATA_48, w

loc_CODE_7E8:
bc      loc_CODE_7FD
movlb   0
movfw   byte_DATA_48
addlw   0A0
movwf   BANK0:FSR1
movlw   1
movwf   BANK0:FSR1H
movfw   BANK0:INDF1
movwf   byte_DATA_70
movfw   byte_DATA_71
movwf   BANK0:FSR1
clrf    BANK0:FSR1H
movfw   byte_DATA_70
movwf   BANK0:INDF1
movlw   1
addwf   byte_DATA_48, f
movlw   0
addwfc  byte_DATA_49, f
movlw   1
return

loc_CODE_7FD:
movlw   0
return
; End of function sub_CODE_7DC

; assume bank = 4
; [00000001 BYTES: COLLAPSED FUNCTION nullsub_2]
movwi   0FF[FSR1]
movwi   0FF[FSR1]
movwi   0FF[FSR1]
movwi   0FF[FSR1]
movwi   0FF[FSR1]
movwi   0FF[FSR1]
movwi   0FF[FSR1]
movwi   0FF[FSR1]
movwi   0FF[FSR1]
movwi   0FF[FSR1]
movwi   0FF[FSR1]
movwi   0FF[FSR1]
movwi   0FF[FSR1]
movwi   0FF[FSR1]
movwi   0FF[FSR1]
movwi   0FF[FSR1]
movwi   0FF[FSR1]
movwi   0FF[FSR1]
movwi   0FF[FSR1]
movwi   0FF[FSR1]
movwi   0FF[FSR1]
movwi   0FF[FSR1]
movwi   0FF[FSR1]
movwi   0FF[FSR1]
movwi   0FF[FSR1]
movwi   0FF[FSR1]
movwi   0FF[FSR1]
movwi   0FF[FSR1]
movwi   0FF[FSR1]
movwi   0FF[FSR1]
movwi   0FF[FSR1]
movwi   0FF[FSR1]
movwi   0FF[FSR1]
movwi   0FF[FSR1]
movwi   0FF[FSR1]
movwi   0FF[FSR1]
movwi   0FF[FSR1]
movwi   0FF[FSR1]
movwi   0FF[FSR1]
movwi   0FF[FSR1]
movwi   0FF[FSR1]
movwi   0FF[FSR1]
movwi   0FF[FSR1]
movwi   0FF[FSR1]
movwi   0FF[FSR1]
movwi   0FF[FSR1]
movwi   0FF[FSR1]
movwi   0FF[FSR1]
movwi   0FF[FSR1]
movwi   0FF[FSR1]
movwi   0FF[FSR1]
movwi   0FF[FSR1]
movwi   0FF[FSR1]
movwi   0FF[FSR1]
movwi   0FF[FSR1]
movwi   0FF[FSR1]
movwi   0FF[FSR1]
movwi   0FF[FSR1]
movwi   0FF[FSR1]
movwi   0FF[FSR1]
movwi   0FF[FSR1]
movwi   0FF[FSR1]
movwi   0FF[FSR1]
movwi   0FF[FSR1]
movwi   0FF[FSR1]
movwi   0FF[FSR1]
movwi   0FF[FSR1]
movwi   0FF[FSR1]
movwi   0FF[FSR1]
movwi   0FF[FSR1]
movwi   0FF[FSR1]
movwi   0FF[FSR1]
movwi   0FF[FSR1]
movwi   0FF[FSR1]
movwi   0FF[FSR1]
movwi   0FF[FSR1]
movwi   0FF[FSR1]
movwi   0FF[FSR1]
movwi   0FF[FSR1]
movwi   0FF[FSR1]
movwi   0FF[FSR1]
movwi   0FF[FSR1]
movwi   0FF[FSR1]
movwi   0FF[FSR1]
movwi   0FF[FSR1]
movwi   0FF[FSR1]
movwi   0FF[FSR1]
movwi   0FF[FSR1]
movwi   0FF[FSR1]
movwi   0FF[FSR1]
movwi   0FF[FSR1]
movwi   0FF[FSR1]
movwi   0FF[FSR1]
movwi   0FF[FSR1]
movwi   0FF[FSR1]
movwi   0FF[FSR1]
movwi   0FF[FSR1]
movwi   0FF[FSR1]
movwi   0FF[FSR1]
movwi   0FF[FSR1]
movwi   0FF[FSR1]
movwi   0FF[FSR1]
movwi   0FF[FSR1]
movwi   0FF[FSR1]
movwi   0FF[FSR1]
movwi   0FF[FSR1]
movwi   0FF[FSR1]
movwi   0FF[FSR1]
movwi   0FF[FSR1]
movwi   0FF[FSR1]
movwi   0FF[FSR1]
movwi   0FF[FSR1]
movwi   0FF[FSR1]
movwi   0FF[FSR1]
movwi   0FF[FSR1]
movwi   0FF[FSR1]
movwi   0FF[FSR1]
movwi   0FF[FSR1]
movwi   0FF[FSR1]
movwi   0FF[FSR1]
movwi   0FF[FSR1]
movwi   0FF[FSR1]
movwi   0FF[FSR1]
movwi   0FF[FSR1]
movwi   0FF[FSR1]
movwi   0FF[FSR1]
movwi   0FF[FSR1]
movwi   0FF[FSR1]
movwi   0FF[FSR1]
movwi   0FF[FSR1]
movwi   0FF[FSR1]
movwi   0FF[FSR1]
movwi   0FF[FSR1]
movwi   0FF[FSR1]
movwi   0FF[FSR1]
movwi   0FF[FSR1]
movwi   0FF[FSR1]
movwi   0FF[FSR1]
movwi   0FF[FSR1]
movwi   0FF[FSR1]
movwi   0FF[FSR1]
movwi   0FF[FSR1]
movwi   0FF[FSR1]
movwi   0FF[FSR1]
movwi   0FF[FSR1]
movwi   0FF[FSR1]
movwi   0FF[FSR1]
movwi   0FF[FSR1]
movwi   0FF[FSR1]
movwi   0FF[FSR1]
movwi   0FF[FSR1]
movwi   0FF[FSR1]
movwi   0FF[FSR1]
movwi   0FF[FSR1]
movwi   0FF[FSR1]
movwi   0FF[FSR1]
movwi   0FF[FSR1]
movwi   0FF[FSR1]
movwi   0FF[FSR1]
movwi   0FF[FSR1]
movwi   0FF[FSR1]
movwi   0FF[FSR1]
movwi   0FF[FSR1]
movwi   0FF[FSR1]
movwi   0FF[FSR1]
movwi   0FF[FSR1]
movwi   0FF[FSR1]
movwi   0FF[FSR1]
movwi   0FF[FSR1]
movwi   0FF[FSR1]
movwi   0FF[FSR1]
movwi   0FF[FSR1]
movwi   0FF[FSR1]
movwi   0FF[FSR1]
movwi   0FF[FSR1]
movwi   0FF[FSR1]
movwi   0FF[FSR1]
movwi   0FF[FSR1]
movwi   0FF[FSR1]
movwi   0FF[FSR1]
movwi   0FF[FSR1]
movwi   0FF[FSR1]
movwi   0FF[FSR1]
movwi   0FF[FSR1]
movwi   0FF[FSR1]
movwi   0FF[FSR1]
movwi   0FF[FSR1]
movwi   0FF[FSR1]
movwi   0FF[FSR1]
movwi   0FF[FSR1]
movwi   0FF[FSR1]
movwi   0FF[FSR1]
movwi   0FF[FSR1]
movwi   0FF[FSR1]
movwi   0FF[FSR1]
movwi   0FF[FSR1]
movwi   0FF[FSR1]
movwi   0FF[FSR1]
movwi   0FF[FSR1]
movwi   0FF[FSR1]
movwi   0FF[FSR1]
movwi   0FF[FSR1]
movwi   0FF[FSR1]
movwi   0FF[FSR1]
movwi   0FF[FSR1]
movwi   0FF[FSR1]
movwi   0FF[FSR1]
movwi   0FF[FSR1]
movwi   0FF[FSR1]
movwi   0FF[FSR1]
movwi   0FF[FSR1]
movwi   0FF[FSR1]
movwi   0FF[FSR1]
movwi   0FF[FSR1]
movwi   0FF[FSR1]
movwi   0FF[FSR1]
movwi   0FF[FSR1]
movwi   0FF[FSR1]
movwi   0FF[FSR1]
movwi   0FF[FSR1]
movwi   0FF[FSR1]
movwi   0FF[FSR1]
movwi   0FF[FSR1]
movwi   0FF[FSR1]
movwi   0FF[FSR1]
movwi   0FF[FSR1]
movwi   0FF[FSR1]
movwi   0FF[FSR1]
movwi   0FF[FSR1]
movwi   0FF[FSR1]
movwi   0FF[FSR1]
movwi   0FF[FSR1]
movwi   0FF[FSR1]
movwi   0FF[FSR1]
movwi   0FF[FSR1]
movwi   0FF[FSR1]
movwi   0FF[FSR1]
movwi   0FF[FSR1]
movwi   0FF[FSR1]
movwi   0FF[FSR1]
movwi   0FF[FSR1]
movwi   0FF[FSR1]
movwi   0FF[FSR1]
movwi   0FF[FSR1]
movwi   0FF[FSR1]
movwi   0FF[FSR1]
movwi   0FF[FSR1]
movwi   0FF[FSR1]
movwi   0FF[FSR1]
movwi   0FF[FSR1]
movwi   0FF[FSR1]
movwi   0FF[FSR1]
movwi   0FF[FSR1]
movwi   0FF[FSR1]
movwi   0FF[FSR1]
movwi   0FF[FSR1]
movwi   0FF[FSR1]
movwi   0FF[FSR1]
movwi   0FF[FSR1]
movwi   0FF[FSR1]
movwi   0FF[FSR1]
movwi   0FF[FSR1]
movwi   0FF[FSR1]
movwi   0FF[FSR1]
movwi   0FF[FSR1]
movwi   0FF[FSR1]
movwi   0FF[FSR1]
movwi   0FF[FSR1]
movwi   0FF[FSR1]
movwi   0FF[FSR1]
movwi   0FF[FSR1]
movwi   0FF[FSR1]
movwi   0FF[FSR1]
movwi   0FF[FSR1]
; assume bank = 1
; assume pclath = 9
; [00000001 BYTES: COLLAPSED FUNCTION nullsub_3]



sub_CODE_913:
retlw   0F
; End of function sub_CODE_913

; assume bank = 0



sub_CODE_914:
movlb   0
clrf    byte_DATA_4F
clrf    byte_DATA_4E
return
; End of function sub_CODE_914

; assume bank = 1



sub_CODE_918:
movlb   1
clrf    byte_DATA_A8
clrf    byte_DATA_A9
movlb   2
; assume bank = 2
bcf     BANK2:LATA, LATA5
return
; End of function sub_CODE_918

; assume bank = 1



sub_CODE_91E:
movlb   0
; assume bank = 0
movfw   byte_DATA_45
movwf   byte_DATA_39
movfw   byte_DATA_44
movwf   byte_DATA_38
return
; End of function sub_CODE_91E

; assume bank = 1



sub_CODE_924:
clrwdt

loc_CODE_925:
clrf    BANK1:INDF0
addfsr  FSR0, 1
decfsz  BANK1:WREG, f
 b       loc_CODE_925
retlw   0
; End of function sub_CODE_924

; assume bank = 0



sub_CODE_92A:
clrc
movlb   1
; assume bank = 1
btfss   BANK1:ADCON0, GO
 setc
movlw   0
addwfc  BANK1:WREG, w
return
; End of function sub_CODE_92A

; assume bank = 0



sub_CODE_931:
clrc
movlb   1
; assume bank = 1
btfss   BANK1:ADCON0, GO
 setc
movlw   0
addwfc  BANK1:WREG, w
return
; End of function sub_CODE_931




sub_CODE_938:
movwf   byte_DATA_F0
movlb   2
; assume bank = 2
bcf     BANK2:DAC1CON0, DACOE1
bcf     BANK2:DAC1CON0, DACOE0
movfw   byte_DATA_170
movwf   BANK2:DAC1CON1
bsf     BANK2:DAC1CON0, DACEN
return
; End of function sub_CODE_938

; assume bank = 1



sub_CODE_940:
movlb   2
; assume bank = 2
bsf     BANK2:LATA, LATA5
movlw   1
movlb   1
; assume bank = 1
movwf   byte_DATA_A8
movlw   0
movwf   byte_DATA_A9
return
; End of function sub_CODE_940

; assume bank = 0



sub_CODE_948:
movlw   3
movlb   1
; assume bank = 1
andwf   BANK1:ADRESH, w
movwf   byte_DATA_F2
movfw   byte_DATA_F2
movwf   byte_DATA_F1
movfw   BANK1:ADRES
movwf   byte_DATA_F0
return
; End of function sub_CODE_948

; assume bank = 3



sub_CODE_951:
movlw   55 ; 'U'
movlb   3
movwf   BANK3:PMCON2
movlw   0AA
movwf   BANK3:PMCON2
bsf     BANK3:PMCON1, WR
nop
nop
return
; End of function sub_CODE_951

; assume bank = 0



sub_CODE_95A:
btfss   BANK0:INTCON, T0IF
 b       loc_CODE_962
movlb   0
movfw   byte_DATA_4C
movwf   BANK0:TMR0
bcf     BANK0:INTCON, T0IF
movlw   1
return

loc_CODE_962:
movlw   0
return
; End of function sub_CODE_95A




sub_CODE_964:
movlw   0C0
movlb   5
; assume bank = 5
iorwf   BANK5:CCPTMRS, f
movlw   0CF
andwf   BANK5:CCPTMRS, f
movlw   0C
iorwf   BANK5:CCPTMRS, f
movlw   3
iorwf   BANK5:CCPTMRS, f
return
; End of function sub_CODE_964

; assume bank = 1



sub_CODE_96E:
movlb   0
; assume bank = 0
movwf   byte_DATA_38
movlb   2
; assume bank = 2
bcf     BANK2:DAC1CON0, DACOE1
bcf     BANK2:DAC1CON0, DACOE0
movlb   0
; assume bank = 0
movfw   byte_DATA_38
movlb   2
; assume bank = 2
movwf   BANK2:DAC1CON1
bsf     BANK2:DAC1CON0, DACEN
return
; End of function sub_CODE_96E

; assume bank = 0



sub_CODE_979:
movlw   3
movlb   1
; assume bank = 1
andwf   BANK1:ADRESH, w
movlb   0
; assume bank = 0
movwf   byte_DATA_3A
movfw   byte_DATA_3A
movwf   byte_DATA_39
movlb   1
; assume bank = 1
movfw   BANK1:ADRES
movlb   0
; assume bank = 0
movwf   byte_DATA_38
return
; End of function sub_CODE_979

; assume bank = 1



sub_CODE_985:
movlb   0
; assume bank = 0
movwf   byte_DATA_3C
movfw   byte_DATA_3C
movwf   byte_DATA_3A
clrf    byte_DATA_3B
movfw   byte_DATA_3A
movwf   byte_DATA_3D
movfw   byte_DATA_3B
movwf   byte_DATA_3E
movfw   byte_DATA_3E
movwf   byte_DATA_39
movfw   byte_DATA_3D
movwf   byte_DATA_38
return
; End of function sub_CODE_985

; assume bank = 1



sub_CODE_993:
movlw   0D8
movlb   0
; assume bank = 0
movwf   byte_DATA_3D
movlw   0
movwf   byte_DATA_3E
movlw   2
movlb   1
; assume bank = 1
movwf   byte_DATA_DA
movfw   byte_DATA_DA
movlb   0
; assume bank = 0
movwf   byte_DATA_3F
movlb   1
; assume bank = 1
movfw   byte_DATA_D6
movlp   0D
; assume pclath = 0D
call    sub_CODE_DEE
return
; End of function sub_CODE_993

; assume bank = 0
; assume pclath = 9



sub_CODE_9A3:
bcf     BANK0:INTCON, GIE
movlb   3
; assume bank = 3
bcf     BANK3:PMCON1, CFGS
movlb   0
; assume bank = 0
movfw   byte_DATA_39
movlb   3
; assume bank = 3
movwf   BANK3:PMADRH
movlb   0
; assume bank = 0
movfw   byte_DATA_38
movlb   3
; assume bank = 3
movwf   BANK3:PMADR
bsf     BANK3:PMCON1, FREE
bsf     BANK3:PMCON1, WREN
movlp   9
call    sub_CODE_951
movlb   3
bcf     BANK3:PMCON1, WREN
bsf     BANK3:INTCON, GIE
return
; End of function sub_CODE_9A3

; assume bank = 0



sub_CODE_9B6:
movlb   0
movwf   byte_DATA_39
movlb   0A
; assume bank = 0A
bsf     BANK10:OPA1CON, OPA1SP
movlb   0
; assume bank = 0
rrf     byte_DATA_38, w
movlb   0A
; assume bank = 0A
skpc
 bcf     BANK10:OPA1CON, OPA1UG
skpnc
 bsf     BANK10:OPA1CON, OPA1UG
movfw   BANK10:OPA1CON
movlb   0
; assume bank = 0
xorwf   byte_DATA_39, w
andlw   0FC
xorwf   byte_DATA_39, w
movlb   0A
; assume bank = 0A
movwf   BANK10:OPA1CON
bsf     BANK10:OPA1CON, OPA1EN
return
; End of function sub_CODE_9B6

; assume bank = 0



sub_CODE_9CA:
movwf   byte_DATA_72
movfw   byte_DATA_72
movwf   byte_DATA_70
rlf     byte_DATA_70, f
rlf     byte_DATA_70, f
movlb   1
; assume bank = 1
movfw   BANK1:ADCON0
xorwf   byte_DATA_F0, w
andlw   83
xorwf   byte_DATA_F0, w
movwf   BANK1:ADCON0
bsf     BANK1:ADCON0, ADON
movlw   6
movwf   byte_DATA_F1
movlw   30 ; '0'
movwf   byte_DATA_F0

loc_CODE_9DA:
decfsz  byte_DATA_F0, f
 b       loc_CODE_9DA
decfsz  byte_DATA_F1, f
 b       loc_CODE_9DA
nop
movlb   1
bsf     BANK1:ADCON0, GO
return
; End of function sub_CODE_9CA

; assume bank = 0



sub_CODE_9E2:
movlb   0
movwf   byte_DATA_39
movlb   1
; assume bank = 1
bsf     BANK1:ADCON1, ADFM
movlw   8F
andwf   BANK1:ADCON1, f
movlb   0
; assume bank = 0
rrf     byte_DATA_38, w
movlb   1
; assume bank = 1
skpc
 bcf     BANK1:ADCON1, ADNREF
skpnc
 bsf     BANK1:ADCON1, ADNREF
movfw   BANK1:ADCON1
movlb   0
; assume bank = 0
xorwf   byte_DATA_39, w
andlw   0FC
xorwf   byte_DATA_39, w
movlb   1
; assume bank = 1
movwf   BANK1:ADCON1
movlw   0F
andwf   BANK1:ADCON2, f
clrf    BANK1:ADRES
clrf    BANK1:ADRESH
return
; End of function sub_CODE_9E2

; assume bank = 0



sub_CODE_9FB:
movlb   0
movwf   byte_DATA_3A
movlb   2
; assume bank = 2
bcf     BANK2:DAC1CON0, DACEN
movlb   0
; assume bank = 0
movfw   byte_DATA_3A
movwf   byte_DATA_39
rlf     byte_DATA_39, f
rlf     byte_DATA_39, f
movlb   2
; assume bank = 2
movfw   BANK2:DAC1CON0
movlb   0
; assume bank = 0
xorwf   byte_DATA_39, w
andlw   0F3
xorwf   byte_DATA_39, w
movlb   2
; assume bank = 2
movwf   BANK2:DAC1CON0
movlb   0
; assume bank = 0
rrf     byte_DATA_38, w
movlb   2
; assume bank = 2
skpc
 bcf     BANK2:DAC1CON0, DACNSS
skpnc
 bsf     BANK2:DAC1CON0, DACNSS
return
; End of function sub_CODE_9FB

; assume bank = 0
; assume pclath = 0A



sub_CODE_A14:
movlb   0
movwf   byte_DATA_3A
movfw   byte_DATA_38
movwf   byte_DATA_39
rlf     byte_DATA_39, f
rlf     byte_DATA_39, f
movlb   2
; assume bank = 2
movfw   BANK2:FVRCON
movlb   0
; assume bank = 0
xorwf   byte_DATA_39, w
andlw   0F3
xorwf   byte_DATA_39, w
movlb   2
; assume bank = 2
movwf   BANK2:FVRCON
movfw   BANK2:FVRCON
movlb   0
; assume bank = 0
xorwf   byte_DATA_3A, w
andlw   0FC
xorwf   byte_DATA_3A, w
movlb   2
; assume bank = 2
movwf   BANK2:FVRCON
bsf     BANK2:FVRCON, FVREN

loc_CODE_A2A:
btfsc   BANK2:FVRCON, FVRRDY
 return
b       loc_CODE_A2A
; End of function sub_CODE_A14

; assume bank = 0



sub_CODE_A2D:
movlb   0
movwf   byte_DATA_3E

loc_CODE_A2F:
movlp   9
; assume pclath = 9
call    sub_CODE_931
movlp   0A
; assume pclath = 0A
xorlw   0
bz      loc_CODE_A2F
movlb   0
movfw   byte_DATA_3E
movlp   0A
call    sub_CODE_A48
movlp   0A

loc_CODE_A3A:
movlp   9
; assume pclath = 9
call    sub_CODE_931
movlp   0A
; assume pclath = 0A
xorlw   0
bz      loc_CODE_A3A
movlp   9
; assume pclath = 9
call    sub_CODE_979
movlb   0
movfw   byte_DATA_39
movwf   byte_DATA_3C
movfw   byte_DATA_38
movwf   byte_DATA_3B
return
; End of function sub_CODE_A2D

; assume pclath = 0A



sub_CODE_A48:
movlb   0
movwf   byte_DATA_3A
movfw   byte_DATA_3A
movwf   byte_DATA_38
rlf     byte_DATA_38, f
rlf     byte_DATA_38, f
movlb   1
; assume bank = 1
movfw   BANK1:ADCON0
movlb   0
; assume bank = 0
xorwf   byte_DATA_38, w
andlw   83
xorwf   byte_DATA_38, w
movlb   1
; assume bank = 1
movwf   BANK1:ADCON0
bsf     BANK1:ADCON0, ADON
movlw   6
movlb   0
; assume bank = 0
movwf   byte_DATA_39
movlw   30 ; '0'
movwf   byte_DATA_38

loc_CODE_A5C:
decfsz  byte_DATA_38, f
 b       loc_CODE_A5C
decfsz  byte_DATA_39, f
 b       loc_CODE_A5C
nop
movlb   1
; assume bank = 1
bsf     BANK1:ADCON0, GO
return
; End of function sub_CODE_A48

; assume bank = 0



sub_CODE_A64:
movlb   0
movfw   byte_DATA_39
movwf   byte_DATA_3B
movfw   byte_DATA_38
movwf   byte_DATA_3A
rlf     byte_DATA_3B, w
rrf     byte_DATA_3B, f
rrf     byte_DATA_3A, f
rlf     byte_DATA_3B, w
rrf     byte_DATA_3B, f
rrf     byte_DATA_3A, f
movfw   byte_DATA_3A
movlb   0C
; assume bank = 0C
movwf   BANK12:PWM3DCH
movlb   0
; assume bank = 0
movfw   byte_DATA_38
andlw   3
movwf   byte_DATA_3A
movlw   5

loc_CODE_A77:
lslf    byte_DATA_3A, f
addlw   0FF
bnz     loc_CODE_A77
lslf    byte_DATA_3A, w
movlb   0C
; assume bank = 0C
movwf   BANK12:PWM3DCL
bcf     BANK12:PWM3CON, PWM3POL
bsf     BANK12:PWM3CON, PWM3EN
return
; End of function sub_CODE_A64

; assume bank = 0



sub_CODE_A81:
movlb   4
; assume bank = 4
bcf     BANK4:SSP1STAT, SMP
bcf     BANK4:SSP1STAT, CKE
bcf     BANK4:SSP1CON, CKP
movfw   BANK4:SSP1CON
andlw   0F0
iorlw   6
movwf   BANK4:SSP1CON
bcf     BANK4:SSP1CON2, GCEN
bcf     BANK4:SSP1CON2, SEN
bsf     BANK4:SSP1CON3, PCIE
bcf     BANK4:SSP1CON3, SCIE
bcf     BANK4:SSP1CON3, BOEN
bcf     BANK4:SSP1CON3, SDAHT
bcf     BANK4:SSP1CON3, SBCDE
bcf     BANK4:SSP1CON3, AHEN
bcf     BANK4:SSP1CON3, DHEN
movlb   0
; assume bank = 0
lslf    byte_DATA_38, w
movlb   4
; assume bank = 4
movwf   BANK4:SSP1ADD
movlb   1
; assume bank = 1
bsf     BANK1:PIE1, SSP1IE
movlb   0
; assume bank = 0
bcf     BANK0:PIR1, SSP1IF
bcf     BANK0:PIR2, BCL1IF
movlb   1
; assume bank = 1
bsf     BANK1:PIE2, BCL1IE
movlb   4
; assume bank = 4
bsf     BANK4:SSP1CON, SSPEN
return
; End of function sub_CODE_A81

; assume bank = 0



sub_CODE_AA0:
movlb   0
decf    byte_DATA_38, w
iorwf   byte_DATA_39, w
bnz     loc_CODE_AA9
movfw   BANK0:T2CON
andlw   0FC
iorlw   2
b       loc_CODE_AAC

loc_CODE_AA9:
movfw   BANK0:T2CON
andlw   0FC
iorlw   1

loc_CODE_AAC:
movwf   BANK0:T2CON
movlw   87
andwf   BANK0:T2CON, f
bsf     BANK0:T2CON, TMR2ON
decf    byte_DATA_38, w
iorwf   byte_DATA_39, w
bnz     loc_CODE_ABB
movlw   0FA
movwf   BANK0:PR2
movlw   0E8
movwf   byte_DATA_44
movlw   3
movwf   byte_DATA_45
return

loc_CODE_ABB:
movlw   64 ; 'd'
movwf   BANK0:PR2
movlw   90
movwf   byte_DATA_44
movlw   1
movwf   byte_DATA_45
return
; End of function sub_CODE_AA0




sub_CODE_AC2:
movlb   1
; assume bank = 1
bcf     BANK1:OPTION_REG, T0CS
bcf     BANK1:OPTION_REG, T0SE
bcf     BANK1:OPTION_REG, PSA
movlb   0
; assume bank = 0
decf    byte_DATA_38, w
iorwf   byte_DATA_39, w
bnz     loc_CODE_AD2
movlb   1
; assume bank = 1
movfw   BANK1:OPTION_REG
andlw   0F8
iorlw   3
movwf   BANK1:OPTION_REG
movlw   6
b       loc_CODE_ADD
; assume bank = 0

loc_CODE_AD2:
movlw   2
xorwf   byte_DATA_38, w
iorwf   byte_DATA_39, w
bnz     loc_CODE_AE2
movlb   1
; assume bank = 1
movfw   BANK1:OPTION_REG
andlw   0F8
iorlw   6
movwf   BANK1:OPTION_REG
movlw   64 ; 'd'

loc_CODE_ADD:
movlb   0
; assume bank = 0
movwf   byte_DATA_3A
movfw   byte_DATA_3A
movwf   byte_DATA_4C
b       loc_CODE_AE7

loc_CODE_AE2:
movlw   7
movlb   1
; assume bank = 1
iorwf   BANK1:OPTION_REG, f
movlb   0
; assume bank = 0
clrf    byte_DATA_4C

loc_CODE_AE7:
movfw   byte_DATA_4C
movwf   BANK0:TMR0
return
; End of function sub_CODE_AC2




sub_CODE_AEA:
movwf   byte_DATA_75
clrf    byte_DATA_76
clrf    byte_DATA_77
clrf    byte_DATA_78
clrf    byte_DATA_79

loc_CODE_AEF:
movfw   byte_DATA_79
xorlw   80
movwf   byte_DATA_72
movfw   byte_DATA_71
xorlw   80
subwf   byte_DATA_72, w
bnz     loc_CODE_AF9
movfw   byte_DATA_70
subwf   byte_DATA_78, w

loc_CODE_AF9:
bc      loc_CODE_B0E
movfw   byte_DATA_78
addwf   byte_DATA_75, w
movwf   byte_DATA_72
movfw   byte_DATA_72
movwf   BANK0:FSR1
movlw   1
movwf   BANK0:FSR1H
movfw   BANK0:INDF1
movwf   byte_DATA_73
clrf    byte_DATA_74
movfw   byte_DATA_73
addwf   byte_DATA_76, f
movfw   byte_DATA_74
addwfc  byte_DATA_77, f
movlw   1
addwf   byte_DATA_78, f
movlw   0
addwfc  byte_DATA_79, f
b       loc_CODE_AEF

loc_CODE_B0E:
movfw   byte_DATA_77
movwf   byte_DATA_71
movfw   byte_DATA_76
movwf   byte_DATA_70
return
; End of function sub_CODE_AEA

; assume bank = 1
; assume pclath = 0B



sub_CODE_B13:
movlb   1
movwf   byte_DATA_CE
clrf    byte_DATA_CC
clrf    byte_DATA_CD
clrf    byte_DATA_CF
clrf    byte_DATA_D0

loc_CODE_B19:
movfw   byte_DATA_D0
xorlw   80
movlb   0
; assume bank = 0
movwf   byte_DATA_3A
movfw   byte_DATA_39
xorlw   80
subwf   byte_DATA_3A, w
bnz     loc_CODE_B25
movfw   byte_DATA_38
movlb   1
; assume bank = 1
subwf   byte_DATA_CF, w
; assume bank = 0

loc_CODE_B25:
bc      loc_CODE_B3F
movlb   1
; assume bank = 1
movfw   byte_DATA_CF
addwf   byte_DATA_CE, w
movlb   0
; assume bank = 0
movwf   byte_DATA_3A
movfw   byte_DATA_3A
movwf   BANK0:FSR1
movlw   1
movwf   BANK0:FSR1H
movfw   BANK0:INDF1
movwf   byte_DATA_3B
clrf    byte_DATA_3C
movfw   byte_DATA_3B
movlb   1
; assume bank = 1
addwf   byte_DATA_CC, f
movlb   0
; assume bank = 0
movfw   byte_DATA_3C
movlb   1
; assume bank = 1
addwfc  byte_DATA_CD, f
movlw   1
addwf   byte_DATA_CF, f
movlw   0
addwfc  byte_DATA_D0, f
b       loc_CODE_B19
; assume bank = 0

loc_CODE_B3F:
movlb   1
; assume bank = 1
movfw   byte_DATA_CD
movlb   0
; assume bank = 0
movwf   byte_DATA_39
movlb   1
; assume bank = 1
movfw   byte_DATA_CC
movlb   0
; assume bank = 0
movwf   byte_DATA_38
return
; End of function sub_CODE_B13

; assume bank = 3



sub_CODE_B48:
movlb   1
; assume bank = 1
movwf   byte_DATA_EA
movfw   byte_DATA_EA
movlp   6
; assume pclath = 6
call    sub_CODE_60E
movlp   0B
; assume pclath = 0B
movlb   1
movfw   byte_DATA_D3
movwf   byte_DATA_E9
movfw   byte_DATA_D2
movwf   byte_DATA_E8
movfw   byte_DATA_EA
movlp   9
; assume pclath = 9
call    sub_CODE_985
movlp   0B
; assume pclath = 0B
movlb   0
; assume bank = 0
movfw   byte_DATA_39
movlb   1
; assume bank = 1
movwf   byte_DATA_E7
movlb   0
; assume bank = 0
movfw   byte_DATA_38
movlb   1
; assume bank = 1
movwf   byte_DATA_E6
movfw   byte_DATA_E9
movlb   0
; assume bank = 0
movwf   byte_DATA_39
movlb   1
; assume bank = 1
movfw   byte_DATA_E8
movlb   0
; assume bank = 0
movwf   byte_DATA_38
movlp   0A
; assume pclath = 0A
call    sub_CODE_A64
movlp   0B
; assume pclath = 0B
movlw   7
movlb   1
; assume bank = 1
movwf   byte_DATA_E5
movlw   17
movwf   byte_DATA_E4
movlw   6F ; 'o'
movwf   byte_DATA_E3

loc_CODE_B70:
decfsz  byte_DATA_E3, f
 b       loc_CODE_B70
decfsz  byte_DATA_E4, f
 b       loc_CODE_B70
decfsz  byte_DATA_E5, f
 b       loc_CODE_B70
nop
movlb   1
movfw   byte_DATA_E6
movwf   byte_DATA_E3
movfw   byte_DATA_E3
movwf   byte_DATA_B0
movfw   byte_DATA_B0
movlp   9
; assume pclath = 9
call    sub_CODE_96E
return
; End of function sub_CODE_B48

; assume bank = 0
; assume pclath = 0B



sub_CODE_B80:
movlb   0
movfw   byte_DATA_39
movlb   3
; assume bank = 3
movwf   BANK3:PMADRH
movlb   0
; assume bank = 0
movfw   byte_DATA_38
movlb   3
; assume bank = 3
movwf   BANK3:PMADR
movlb   1
; assume bank = 1
clrf    byte_DATA_CC

loc_CODE_B8A:
movfw   byte_DATA_CC
movlb   0
; assume bank = 0
movwf   byte_DATA_3E
clrf    byte_DATA_3F
movfw   byte_DATA_3D
subwf   byte_DATA_3F, w
bnz     loc_CODE_B94
movfw   byte_DATA_3C
subwf   byte_DATA_3E, w

loc_CODE_B94:
skpnc
 return
movlb   3
; assume bank = 3
bcf     BANK3:PMCON1, CFGS
bsf     BANK3:PMCON1, RD
nop
nop
movlb   1
; assume bank = 1
movfw   byte_DATA_CC
movlb   0
; assume bank = 0
movwf   byte_DATA_3E
clrf    byte_DATA_3F
lslf    byte_DATA_3E, f
rlf     byte_DATA_3F, f
movfw   byte_DATA_3E
addwf   byte_DATA_3A, w
movwf   BANK0:FSR1
movfw   byte_DATA_3F
addwfc  byte_DATA_3B, w
movwf   BANK0:FSR1H
movlb   3
; assume bank = 3
movfw   BANK3:PMDAT
movwi   0[FSR1]
movfw   BANK3:PMDATH
movwi   1[FSR1]
movlw   1
addwf   BANK3:PMADR, f
movlw   0
addwfc  BANK3:PMADRH, f
movlw   1
movlb   0
; assume bank = 0
movwf   byte_DATA_3E
movfw   byte_DATA_3E
movlb   1
; assume bank = 1
addwf   byte_DATA_CC, f
b       loc_CODE_B8A
; End of function sub_CODE_B80

; assume bank = 0



sub_CODE_BB8:
movlw   0
movlb   1
; assume bank = 1
movwf   byte_DATA_CF
movlw   0
movwf   byte_DATA_CE
movlw   0
movwf   byte_DATA_CD
movlw   0
movwf   byte_DATA_CC
; assume bank = 0

loc_CODE_BC1:
movlb   0
btfss   byte_DATA_38, 0
 b       loc_CODE_BD3
movfw   byte_DATA_3C
movlb   1
; assume bank = 1
addwf   byte_DATA_CC, f
movlb   0
; assume bank = 0
movfw   byte_DATA_3D
movlb   1
; assume bank = 1
addwfc  byte_DATA_CD, f
movlb   0
; assume bank = 0
movfw   byte_DATA_3E
movlb   1
; assume bank = 1
addwfc  byte_DATA_CE, f
movlb   0
; assume bank = 0
movfw   byte_DATA_3F
movlb   1
; assume bank = 1
addwfc  byte_DATA_CF, f
; assume bank = 0

loc_CODE_BD3:
movlw   1

loc_CODE_BD4:
movlb   0
lslf    byte_DATA_3C, f
rlf     byte_DATA_3D, f
rlf     byte_DATA_3E, f
rlf     byte_DATA_3F, f
decfsz  BANK0:WREG, f
 b       loc_CODE_BD4
movlw   1

loc_CODE_BDC:
lsrf    byte_DATA_3B, f
rrf     byte_DATA_3A, f
rrf     byte_DATA_39, f
rrf     byte_DATA_38, f
decfsz  BANK0:WREG, f
 b       loc_CODE_BDC
movfw   byte_DATA_3B
iorwf   byte_DATA_3A, w
iorwf   byte_DATA_39, w
iorwf   byte_DATA_38, w
bnz     loc_CODE_BC1
movlb   1
; assume bank = 1
movfw   byte_DATA_CF
movlb   0
; assume bank = 0
movwf   byte_DATA_3B
movlb   1
; assume bank = 1
movfw   byte_DATA_CE
movlb   0
; assume bank = 0
movwf   byte_DATA_3A
movlb   1
; assume bank = 1
movfw   byte_DATA_CD
movlb   0
; assume bank = 0
movwf   byte_DATA_39
movlb   1
; assume bank = 1
movfw   byte_DATA_CC
movlb   0
; assume bank = 0
movwf   byte_DATA_38
return
; End of function sub_CODE_BB8




sub_CODE_BF9:
movfw   byte_DATA_73
iorwf   byte_DATA_72, w
iorwf   byte_DATA_71, w
iorwf   byte_DATA_70, w
bz      loc_CODE_C32
clrf    byte_DATA_79
incf    byte_DATA_79, f

loc_CODE_C01:
btfsc   byte_DATA_73, 7
 b       loc_CODE_C0F
movlw   1

loc_CODE_C04:
lslf    byte_DATA_70, f
rlf     byte_DATA_71, f
rlf     byte_DATA_72, f
rlf     byte_DATA_73, f
decfsz  BANK0:WREG, f
 b       loc_CODE_C04
movlw   1
movwf   byte_DATA_78
movfw   byte_DATA_78
addwf   byte_DATA_79, f
b       loc_CODE_C01

loc_CODE_C0F:
movfw   byte_DATA_73
subwf   byte_DATA_77, w
bnz     loc_CODE_C1D
movfw   byte_DATA_72
subwf   byte_DATA_76, w
bnz     loc_CODE_C1D
movfw   byte_DATA_71
subwf   byte_DATA_75, w
bnz     loc_CODE_C1D
movfw   byte_DATA_70
subwf   byte_DATA_74, w

loc_CODE_C1D:
bnc     loc_CODE_C27
movfw   byte_DATA_70
subwf   byte_DATA_74, f
movfw   byte_DATA_71
subwfb  byte_DATA_75, f
movfw   byte_DATA_72
subwfb  byte_DATA_76, f
movfw   byte_DATA_73
subwfb  byte_DATA_77, f

loc_CODE_C27:
movlw   1

loc_CODE_C28:
lsrf    byte_DATA_73, f
rrf     byte_DATA_72, f
rrf     byte_DATA_71, f
rrf     byte_DATA_70, f
decfsz  BANK0:WREG, f
 b       loc_CODE_C28
movlw   1
subwf   byte_DATA_79, f
bnz     loc_CODE_C0F

loc_CODE_C32:
movfw   byte_DATA_77
movwf   byte_DATA_73
movfw   byte_DATA_76
movwf   byte_DATA_72
movfw   byte_DATA_75
movwf   byte_DATA_71
movfw   byte_DATA_74
movwf   byte_DATA_70
return
; End of function sub_CODE_BF9

; assume bank = 3
; assume pclath = 0C



sub_CODE_C3B:
movlb   1
; assume bank = 1
bcf     BANK1:OSCCON, SPLLEN
movlw   78 ; 'x'
iorwf   BANK1:OSCCON, f
movlw   0FC
andwf   BANK1:OSCCON, f

loc_CODE_C41:
btfss   BANK1:OSCSTAT, HFIOFS
 b       loc_CODE_C41
bsf     BANK1:TRISA, TRISA0
bsf     BANK1:TRISA, TRISA1
bcf     BANK1:TRISA, TRISA2
movlb   2
; assume bank = 2
bcf     BANK2:LATA, LATA2
movlb   1
; assume bank = 1
bsf     BANK1:TRISA, TRISA4
bcf     BANK1:TRISA, TRISA5
movlb   3
; assume bank = 3
clrf    BANK3:ANSELA
bsf     BANK3:ANSELA, ANSA2
bsf     BANK3:ANSELA, ANSA4
movlb   4
; assume bank = 4
clrf    BANK4:WPUA
movlb   1
; assume bank = 1
bsf     BANK1:TRISC, TRISC0
bsf     BANK1:TRISC, TRISC1
bcf     BANK1:TRISC, TRISC2
bsf     BANK1:TRISC, TRISC3
bsf     BANK1:TRISC, TRISC4
bcf     BANK1:TRISC, TRISC5
movlb   3
; assume bank = 3
clrf    BANK3:ANSELC
bsf     BANK3:ANSELC, ANSC3
movlb   4
; assume bank = 4
clrf    BANK4:WPUC
movlb   7
; assume bank = 7
clrf    BANK7:IOCAP
clrf    BANK7:IOCAN
clrf    BANK7:IOCAF
clrf    BANK7:IOCCP
clrf    BANK7:IOCCN
bsf     BANK7:IOCCP, IOCCP4
bsf     BANK7:IOCCN, IOCCN4
clrf    BANK7:IOCCF
bsf     BANK7:INTCON, IOCIE
bsf     BANK7:INTCON, T0IE
movlw   77 ; 'w'
movlb   8
; assume bank = 8
movwf   BANK8:T4CON
movlw   0FA
movwf   BANK8:PR4
movlb   1
; assume bank = 1
bsf     BANK1:PIE2, TMR4IE
bsf     BANK1:INTCON, PEIE
movlb   1C
; assume bank = 1C
bcf     BANK28:PPSLOCK, PPSLOCKED
movlw   10
movwf   BANK28:SSPCLKPPS
movlw   11
movwf   BANK28:SSPDATPPS
movlw   10
movlb   1D
; assume bank = 1D
movwf   BANK29:RC0PPS
movlw   11
movwf   BANK29:RC1PPS
movlw   0E
movwf   BANK29:RC5PPS
movlb   1C
; assume bank = 1C
bsf     BANK28:PPSLOCK, PPSLOCKED
return
; End of function sub_CODE_C3B

; assume bank = 3



sub_CODE_C80:
movlb   1
; assume bank = 1
movwf   byte_DATA_E6
movfw   byte_DATA_E6
movlp   6
; assume pclath = 6
call    sub_CODE_60E
movlp   0C
; assume pclath = 0C
movlb   1
movfw   byte_DATA_D3
movwf   byte_DATA_E8
movfw   byte_DATA_D2
movwf   byte_DATA_E7
movfw   byte_DATA_E6
movlp   9
; assume pclath = 9
call    sub_CODE_985
movlp   0C
; assume pclath = 0C
movlb   0
; assume bank = 0
movfw   byte_DATA_39
movlb   1
; assume bank = 1
movwf   byte_DATA_EA
movlb   0
; assume bank = 0
movfw   byte_DATA_38
movlb   1
; assume bank = 1
movwf   byte_DATA_E9
movfw   byte_DATA_B0
movwf   byte_DATA_E3
clrf    byte_DATA_E4
movfw   byte_DATA_EA
subwf   byte_DATA_E4, w
bnz     loc_CODE_CA0
movfw   byte_DATA_E9
subwf   byte_DATA_E3, w

loc_CODE_CA0:
bnc     loc_CODE_CC0
movfw   byte_DATA_E8
movlb   0
; assume bank = 0
movwf   byte_DATA_39
movlb   1
; assume bank = 1
movfw   byte_DATA_E7
movlb   0
; assume bank = 0
movwf   byte_DATA_38
movlp   0A
; assume pclath = 0A
call    sub_CODE_A64
movlp   0C
; assume pclath = 0C
movlw   7
movlb   1
; assume bank = 1
movwf   byte_DATA_E5
movlw   17
movwf   byte_DATA_E4
movlw   6F ; 'o'
movwf   byte_DATA_E3

loc_CODE_CB3:
decfsz  byte_DATA_E3, f
 b       loc_CODE_CB3
decfsz  byte_DATA_E4, f
 b       loc_CODE_CB3
decfsz  byte_DATA_E5, f
 b       loc_CODE_CB3
nop
movlb   1
movfw   byte_DATA_E9
movwf   byte_DATA_E3
movfw   byte_DATA_E3
movwf   byte_DATA_B1
return

loc_CODE_CC0:
movfw   byte_DATA_E9
movwf   byte_DATA_E3
movfw   byte_DATA_E3
movwf   byte_DATA_B1
clrf    byte_DATA_B2
incf    byte_DATA_B2, f
movfw   byte_DATA_E8
movwf   byte_DATA_A7
movfw   byte_DATA_E7
movwf   byte_DATA_A6
return
; End of function sub_CODE_C80

; assume bank = 0



sub_CODE_CCB:
movlw   0
movwf   byte_DATA_7C
movlw   0
movwf   byte_DATA_7B
movlw   0
movwf   byte_DATA_7A
movlw   0
movwf   byte_DATA_79
movfw   byte_DATA_73
iorwf   byte_DATA_72, w
iorwf   byte_DATA_71, w
iorwf   byte_DATA_70, w
bz      loc_CODE_D14
clrf    byte_DATA_7D
incf    byte_DATA_7D, f

loc_CODE_CDB:
btfsc   byte_DATA_73, 7
 b       loc_CODE_CE9
movlw   1

loc_CODE_CDE:
lslf    byte_DATA_70, f
rlf     byte_DATA_71, f
rlf     byte_DATA_72, f
rlf     byte_DATA_73, f
decfsz  BANK0:WREG, f
 b       loc_CODE_CDE
movlw   1
movwf   byte_DATA_78
movfw   byte_DATA_78
addwf   byte_DATA_7D, f
b       loc_CODE_CDB

loc_CODE_CE9:
movlw   1

loc_CODE_CEA:
lslf    byte_DATA_79, f
rlf     byte_DATA_7A, f
rlf     byte_DATA_7B, f
rlf     byte_DATA_7C, f
decfsz  BANK0:WREG, f
 b       loc_CODE_CEA
movfw   byte_DATA_73
subwf   byte_DATA_77, w
bnz     loc_CODE_CFE
movfw   byte_DATA_72
subwf   byte_DATA_76, w
bnz     loc_CODE_CFE
movfw   byte_DATA_71
subwf   byte_DATA_75, w
bnz     loc_CODE_CFE
movfw   byte_DATA_70
subwf   byte_DATA_74, w

loc_CODE_CFE:
bnc     loc_CODE_D09
movfw   byte_DATA_70
subwf   byte_DATA_74, f
movfw   byte_DATA_71
subwfb  byte_DATA_75, f
movfw   byte_DATA_72
subwfb  byte_DATA_76, f
movfw   byte_DATA_73
subwfb  byte_DATA_77, f
bsf     byte_DATA_79, 0

loc_CODE_D09:
movlw   1

loc_CODE_D0A:
lsrf    byte_DATA_73, f
rrf     byte_DATA_72, f
rrf     byte_DATA_71, f
rrf     byte_DATA_70, f
decfsz  BANK0:WREG, f
 b       loc_CODE_D0A
movlw   1
subwf   byte_DATA_7D, f
bnz     loc_CODE_CE9

loc_CODE_D14:
movfw   byte_DATA_7C
movwf   byte_DATA_73
movfw   byte_DATA_7B
movwf   byte_DATA_72
movfw   byte_DATA_7A
movwf   byte_DATA_71
movfw   byte_DATA_79
movwf   byte_DATA_70
return
; End of function sub_CODE_CCB

; assume pclath = 0D



sub_CODE_D1D:
movlw   0
movlb   1
; assume bank = 1
movwf   byte_DATA_D0
movlw   0
movwf   byte_DATA_CF
movlw   0
movwf   byte_DATA_CE
movlw   0
movwf   byte_DATA_CD
movlb   0
; assume bank = 0
movfw   byte_DATA_3B
iorwf   byte_DATA_3A, w
iorwf   byte_DATA_39, w
iorwf   byte_DATA_38, w
bz      loc_CODE_D71
movlb   1
; assume bank = 1
clrf    byte_DATA_D1
incf    byte_DATA_D1, f

loc_CODE_D30:
movlb   0
; assume bank = 0
btfsc   byte_DATA_3B, 7
 b       loc_CODE_D41
movlw   1

loc_CODE_D34:
movlb   0
lslf    byte_DATA_38, f
rlf     byte_DATA_39, f
rlf     byte_DATA_3A, f
rlf     byte_DATA_3B, f
decfsz  BANK0:WREG, f
 b       loc_CODE_D34
movlw   1
movlb   1
; assume bank = 1
movwf   byte_DATA_CC
movfw   byte_DATA_CC
addwf   byte_DATA_D1, f
b       loc_CODE_D30

loc_CODE_D41:
movlw   1

loc_CODE_D42:
movlb   1
lslf    byte_DATA_CD, f
rlf     byte_DATA_CE, f
rlf     byte_DATA_CF, f
rlf     byte_DATA_D0, f
decfsz  BANK1:WREG, f
 b       loc_CODE_D42
movlb   0
; assume bank = 0
movfw   byte_DATA_3B
subwf   byte_DATA_3F, w
bnz     loc_CODE_D58
movfw   byte_DATA_3A
subwf   byte_DATA_3E, w
bnz     loc_CODE_D58
movfw   byte_DATA_39
subwf   byte_DATA_3D, w
bnz     loc_CODE_D58
movfw   byte_DATA_38
subwf   byte_DATA_3C, w

loc_CODE_D58:
bnc     loc_CODE_D64
movfw   byte_DATA_38
subwf   byte_DATA_3C, f
movfw   byte_DATA_39
subwfb  byte_DATA_3D, f
movfw   byte_DATA_3A
subwfb  byte_DATA_3E, f
movfw   byte_DATA_3B
subwfb  byte_DATA_3F, f
movlb   1
; assume bank = 1
bsf     byte_DATA_CD, 0
; assume bank = 0

loc_CODE_D64:
movlw   1

loc_CODE_D65:
movlb   0
lsrf    byte_DATA_3B, f
rrf     byte_DATA_3A, f
rrf     byte_DATA_39, f
rrf     byte_DATA_38, f
decfsz  BANK0:WREG, f
 b       loc_CODE_D65
movlw   1
movlb   1
; assume bank = 1
subwf   byte_DATA_D1, f
bnz     loc_CODE_D41
; assume bank = 0

loc_CODE_D71:
movlb   1
; assume bank = 1
movfw   byte_DATA_D0
movlb   0
; assume bank = 0
movwf   byte_DATA_3B
movlb   1
; assume bank = 1
movfw   byte_DATA_CF
movlb   0
; assume bank = 0
movwf   byte_DATA_3A
movlb   1
; assume bank = 1
movfw   byte_DATA_CE
movlb   0
; assume bank = 0
movwf   byte_DATA_39
movlb   1
; assume bank = 1
movfw   byte_DATA_CD
movlb   0
; assume bank = 0
movwf   byte_DATA_38
return
; End of function sub_CODE_D1D




sub_CODE_D82:
movlb   0
btfss   BANK0:PIR1, SSP1IF
 b       loc_CODE_DE2
movlb   4
; assume bank = 4
btfss   BANK4:SSP1STAT, P
 b       loc_CODE_D8F
movlb   0
; assume bank = 0
movfw   byte_DATA_4E
bz      loc_CODE_DE0
clrf    byte_DATA_4F
incf    byte_DATA_4F, f
b       loc_CODE_DE0
; assume bank = 4

loc_CODE_D8F:
btfss   BANK4:SSP1CON, SSPOV
 b       loc_CODE_D92
bcf     BANK4:SSP1CON, SSPOV

loc_CODE_D92:
btfss   BANK4:SSP1STAT, R_NOT_W
 b       loc_CODE_DB7
btfsc   BANK4:SSP1STAT, D_NOT_A
 b       loc_CODE_D9B
movfw   BANK4:SSP1BUF
movwf   byte_DATA_27D
movfw   byte_DATA_27D
movlb   0
; assume bank = 0
movwf   byte_DATA_24
; assume bank = 4

loc_CODE_D9B:
movlb   0
; assume bank = 0
movfw   byte_DATA_4F
bz      loc_CODE_DA2
clrf    byte_DATA_4F
movfw   byte_DATA_53
b       loc_CODE_DB4

loc_CODE_DA2:
movlw   53 ; 'S'
movlp   7
; assume pclath = 7
call    sub_CODE_7DC
movlp   0D
; assume pclath = 0D
xorlw   0
bz      loc_CODE_DB1
movlb   0
movfw   byte_DATA_53
movlb   4
; assume bank = 4
movwf   BANK4:SSP1BUF
movlb   0
; assume bank = 0
clrf    byte_DATA_4E
incf    byte_DATA_4E, f
b       loc_CODE_DDE

loc_CODE_DB1:
movlb   0
clrf    byte_DATA_4E
movlw   0F5

loc_CODE_DB4:
movlb   4
; assume bank = 4
movwf   BANK4:SSP1BUF
b       loc_CODE_DDE

loc_CODE_DB7:
btfsc   BANK4:SSP1STAT, D_NOT_A
 b       loc_CODE_DC4
movfw   BANK4:SSP1BUF
movwf   byte_DATA_27D
movfw   byte_DATA_27D
movlb   0
; assume bank = 0
movwf   byte_DATA_24
movlb   4
; assume bank = 4
bsf     BANK4:SSP1CON, CKP
movlb   0
; assume bank = 0
clrf    byte_DATA_50
incf    byte_DATA_50, f
b       loc_CODE_DE0
; assume bank = 4

loc_CODE_DC4:
btfss   BANK4:SSP1CON, WCOL
 b       loc_CODE_DCE
movfw   BANK4:SSP1BUF
movwf   byte_DATA_27D
movfw   byte_DATA_27D
movlb   0
; assume bank = 0
movwf   byte_DATA_24
movlb   4
; assume bank = 4
bcf     BANK4:SSP1CON, WCOL
b       loc_CODE_DDE

loc_CODE_DCE:
movlb   0
; assume bank = 0
movfw   byte_DATA_50
bz      loc_CODE_DD9
clrf    byte_DATA_50
movlb   4
; assume bank = 4
movfw   BANK4:SSP1BUF
movlp   7
; assume pclath = 7
call    nullsub_2
movlp   0D
; assume pclath = 0D
b       loc_CODE_DDE
; assume bank = 0

loc_CODE_DD9:
movlb   4
; assume bank = 4
movfw   BANK4:SSP1BUF
movlp   5
; assume pclath = 5
call    sub_CODE_53D
movlp   0D
; assume pclath = 0D

loc_CODE_DDE:
movlb   4
bsf     BANK4:SSP1CON, CKP
; assume bank = 0

loc_CODE_DE0:
movlb   0
bcf     BANK0:PIR1, SSP1IF

loc_CODE_DE2:
btfss   BANK0:PIR2, BCL1IF
 return
movlb   4
; assume bank = 4
movfw   BANK4:SSP1BUF
movwf   byte_DATA_27D
movfw   byte_DATA_27D
movlb   0
; assume bank = 0
movwf   byte_DATA_24
bcf     BANK0:PIR2, BCL1IF
movlb   4
; assume bank = 4
bsf     BANK4:SSP1CON, CKP
return
; End of function sub_CODE_D82

; assume bank = 1



sub_CODE_DEE:
movlb   1
movwf   byte_DATA_D2
movlw   0A0
movwf   byte_DATA_D1
movfw   byte_DATA_D1
movwf   byte_DATA_D5
movlb   0
; assume bank = 0
movfw   byte_DATA_3F
addlw   4
movlb   1
; assume bank = 1
movwf   byte_DATA_D3
movlw   0
skpnc
 movlw   1
movwf   byte_DATA_D4
movlw   1
subwf   byte_DATA_D4, w
movlw   0
skpnz
 subwf   byte_DATA_D3, w
skpnc
 return
movfw   byte_DATA_D5
movwf   BANK1:FSR1
movlw   1
movwf   BANK1:FSR1H
movlw   55 ; 'U'
movwi   0[FSR1]
movlw   0AA
movwi   1[FSR1]
movlb   0
; assume bank = 0
movfw   byte_DATA_3F
addlw   4
movlb   1
; assume bank = 1
movwf   byte_DATA_D1
movfw   byte_DATA_D5
addlw   2
movwf   BANK1:FSR1
movlw   1
movwf   BANK1:FSR1H
movfw   byte_DATA_D1
movwf   BANK1:INDF1
movfw   byte_DATA_D2
movwf   byte_DATA_D1
movfw   byte_DATA_D5
addlw   3
movwf   BANK1:FSR1
movlw   1
movwf   BANK1:FSR1H
movfw   byte_DATA_D1
movwf   BANK1:INDF1
movlb   0
; assume bank = 0
movfw   byte_DATA_3F
bz      loc_CODE_E36
movfw   byte_DATA_3D
movwf   BANK0:FSR0
movfw   byte_DATA_3E
movwf   BANK0:FSR0H
movfw   byte_DATA_3F
movlb   1
; assume bank = 1
movwf   byte_DATA_D1
movlw   4
addlw   0A0
movwf   BANK1:FSR1
movlw   1
movwf   BANK1:FSR1H

loc_CODE_E31:
moviw   FSR0++
movwi   FSR1++
movlb   1
decfsz  byte_DATA_D1, f
 b       loc_CODE_E31
; assume bank = 0

loc_CODE_E36:
movlb   1
; assume bank = 1
movfw   byte_DATA_D5
addlw   2
movwf   BANK1:FSR1
movlw   1
movwf   BANK1:FSR1H
movfw   BANK1:INDF1
addlw   0FE
movlb   0
; assume bank = 0
movwf   byte_DATA_38
movlw   0FF
skpnc
 movlw   0
movwf   byte_DATA_39
movlb   1
; assume bank = 1
movfw   byte_DATA_D5
addlw   2
movlp   0B
; assume pclath = 0B
call    sub_CODE_B13
movlp   0D
; assume pclath = 0D
movlb   0
; assume bank = 0
movfw   byte_DATA_39
movlb   1
; assume bank = 1
movwf   byte_DATA_D4
movlb   0
; assume bank = 0
movfw   byte_DATA_38
movlb   1
; assume bank = 1
movwf   byte_DATA_D3
movfw   byte_DATA_D5
addlw   2
movwf   BANK1:FSR1
movlw   1
movwf   BANK1:FSR1H
movfw   BANK1:INDF1
addlw   0A0
movwf   BANK1:FSR1
movlw   1
movwf   BANK1:FSR1H
movfw   byte_DATA_D3
movwi   0[FSR1]
movfw   byte_DATA_D4
movwi   1[FSR1]
movlb   0
; assume bank = 0
clrf    byte_DATA_48
clrf    byte_DATA_49
movlb   1
; assume bank = 1
movfw   byte_DATA_D5
addlw   2
movwf   BANK1:FSR1
movlw   1
movwf   BANK1:FSR1H
movfw   BANK1:INDF1
addlw   2
movlb   0
; assume bank = 0
movwf   byte_DATA_4A
movlw   0
skpnc
 movlw   1
movwf   byte_DATA_4B
movlp   9
; assume pclath = 9
call    sub_CODE_914
return
; End of function sub_CODE_DEE

; assume bank = 1
; assume pclath = 0E



sub_CODE_E74:
movlw   0E0
movlb   1
andwf   byte_DATA_CD, w
movwf   byte_DATA_D5
movlw   0F
andwf   byte_DATA_CE, w
movwf   byte_DATA_D6
movfw   byte_DATA_D6
movlb   0
; assume bank = 0
movwf   byte_DATA_39
movlb   1
; assume bank = 1
movfw   byte_DATA_D5
movlb   0
; assume bank = 0
movwf   byte_DATA_38
movlw   20 ; ' '
movwf   byte_DATA_3A
movlw   2
movwf   byte_DATA_3B
movlw   20 ; ' '
movwf   byte_DATA_3C
movlw   0
movwf   byte_DATA_3D
movlp   0B
; assume pclath = 0B
call    sub_CODE_B80
movlp   0E
; assume pclath = 0E
movlb   1
; assume bank = 1
clrf    byte_DATA_D7

loc_CODE_E8F:
movfw   byte_DATA_D7
movwf   byte_DATA_D3
clrf    byte_DATA_D4
movfw   byte_DATA_D2
subwf   byte_DATA_D4, w
bnz     loc_CODE_E98
movfw   byte_DATA_D1
subwf   byte_DATA_D3, w

loc_CODE_E98:
bc      loc_CODE_EB6
movfw   byte_DATA_D7
movwf   byte_DATA_D3
clrf    byte_DATA_D4
lslf    byte_DATA_D3, f
rlf     byte_DATA_D4, f
movfw   byte_DATA_D3
addwf   byte_DATA_CF, w
movwf   BANK1:FSR1
movfw   byte_DATA_D4
addwfc  byte_DATA_D0, w
movwf   BANK1:FSR1H
movfw   byte_DATA_CD
andlw   1F
addwf   byte_DATA_D7, w
addwf   BANK1:WREG, w
addlw   20 ; ' '
movwf   BANK1:FSR0
movlw   2
movwf   BANK1:FSR0H
moviw   0[FSR1]
movwi   0[FSR0]
moviw   1[FSR1]
movwi   1[FSR0]
movlw   1
movwf   byte_DATA_D3
movfw   byte_DATA_D3
addwf   byte_DATA_D7, f
b       loc_CODE_E8F

loc_CODE_EB6:
movfw   byte_DATA_D6
movlb   0
; assume bank = 0
movwf   byte_DATA_39
movlb   1
; assume bank = 1
movfw   byte_DATA_D5
movlb   0
; assume bank = 0
movwf   byte_DATA_38
movlp   9
; assume pclath = 9
call    sub_CODE_9A3
movlp   0E
; assume pclath = 0E
bcf     BANK0:INTCON, GIE
movlb   3
; assume bank = 3
bcf     BANK3:PMCON1, CFGS
movlb   1
; assume bank = 1
movfw   byte_DATA_D6
movlb   3
; assume bank = 3
movwf   BANK3:PMADRH
movlb   1
; assume bank = 1
movfw   byte_DATA_D5
movlb   3
; assume bank = 3
movwf   BANK3:PMADR
bcf     BANK3:PMCON1, FREE
bsf     BANK3:PMCON1, LWLO
bsf     BANK3:PMCON1, WREN
movlb   1
; assume bank = 1
clrf    byte_DATA_D7
movlw   1F
subwf   byte_DATA_D7, w
bc      loc_CODE_EEF

loc_CODE_ED4:
lslf    byte_DATA_D7, w
addlw   20 ; ' '
movwf   BANK1:FSR1
movlw   2
movwf   BANK1:FSR1H
moviw   0[FSR1]
movlb   3
; assume bank = 3
movwf   BANK3:PMDAT
moviw   1[FSR1]
movwf   BANK3:PMDATH
movlp   9
; assume pclath = 9
call    sub_CODE_951
movlp   0E
; assume pclath = 0E
movlw   1
movlb   3
addwf   BANK3:PMADR, f
movlw   0
addwfc  BANK3:PMADRH, f
movlw   1
movlb   1
; assume bank = 1
movwf   byte_DATA_D3
movfw   byte_DATA_D3
addwf   byte_DATA_D7, f
movlw   1F
subwf   byte_DATA_D7, w
bnc     loc_CODE_ED4

loc_CODE_EEF:
movlb   4
; assume bank = 4
movfw   byte_DATA_25F
movlb   3
; assume bank = 3
movwf   BANK3:PMDATH
movlb   4
; assume bank = 4
movfw   byte_DATA_25E
movlb   3
; assume bank = 3
movwf   BANK3:PMDAT
bcf     BANK3:PMCON1, LWLO
movlp   9
; assume pclath = 9
call    sub_CODE_951
nop
nop
movlb   3
bcf     BANK3:PMCON1, WREN
bsf     BANK3:INTCON, GIE
return
; End of function sub_CODE_E74

data  3FFF
data 3FFF, 3FFF, 3FFF, 3FFF, 3FFF, 3FFF
data 3FFF, 3FFF, 3FFF, 3FFF, 3FFF, 3FFF
data 3FFF, 3FFF, 3FFF, 3FFF, 3FFF, 3FFF
data 3FFF, 3FFF, 3FFF, 3FFF, 3FFF, 3FFF
data 3FFF, 3FFF, 3FFF, 3FFF, 3FFF, 3FFF
data 3FFF, 3FFF, 3FFF, 3FFF, 3FFF, 3FFF
data 3FFF, 3FFF, 3FFF, 3FFF, 3FFF, 3FFF
data 3FFF, 3FFF, 3FFF, 3FFF, 3FFF, 3FFF
data 3FFF, 3FFF, 3FFF, 3FFF, 3FFF, 3FFF
data 3FFF, 3FFF, 3FFF, 3FFF, 3FFF, 3FFF
data 3FFF, 3FFF, 3FFF, 3FFF, 3FFF, 3FFF
data 3FFF, 3FFF, 3FFF, 3FFF, 3FFF, 3FFF
data 3FFF, 3FFF, 3FFF, 3FFF, 3FFF, 3FFF
data 3FFF, 3FFF, 3FFF, 3FFF, 3FFF, 3FFF
data 3FFF, 3FFF, 3FFF, 3FFF, 3FFF, 3FFF
data 3FFF, 3FFF, 3FFF, 3FFF, 3FFF, 3FFF
data 3FFF, 3FFF, 3FFF, 3FFF, 3FFF, 3FFF
data 3FFF, 3FFF, 3FFF, 3FFF, 3FFF, 3FFF
data 3FFF, 3FFF, 3FFF, 3FFF, 3FFF, 3FFF
data 3FFF, 3FFF, 3FFF, 3FFF, 3FFF, 3FFF
data 3FFF, 3FFF, 3FFF, 3FFF, 3FFF, 3FFF
data 3FFF, 3FFF, 3FFF, 3FFF, 3FFF, 3FFF
data 3FFF, 3FFF, 3FFF, 3FFF, 3FFF, 3FFF
data 3FFF, 3FFF, 3FFF, 3FFF, 3FFF, 3FFF
data 3FFF, 3FFF, 3FFF, 3FFF, 3FFF, 3FFF
data 3FFF, 3FFF, 3FFF, 3FFF, 3FFF, 3FFF
data 3FFF, 3FFF, 3FFF, 3FFF, 3FFF, 3FFF
data 3FFF, 3FFF, 3FFF, 3FFF, 3FFF, 3FFF
data 3FFF, 3FFF, 3FFF, 3FFF, 3FFF, 3FFF
data 3FFF, 3FFF, 3FFF, 3FFF, 3FFF, 3FFF
data 3FFF, 3FFF, 3FFF, 3FFF, 3FFF, 3FFF
data 3FFF, 3FFF, 3FFF, 3FFF, 3FFF, 3FFF
data 3FFF, 3FFF, 3FFF, 3FFF, 3FFF, 3FFF
data 3FFF, 3FFF, 3FFF, 3FFF, 3FFF, 3FFF
data 3FFF, 3FFF, 3FFF, 3FFF, 3FFF, 3FFF
data 3FFF, 3FFF, 3FFF, 3FFF, 3FFF, 3FFF
data 3FFF, 12C, 1, 3FFF, 3FFF, 3FFF, 3FFF
data 3FFF, 3FFF, 3FFF, 3FFF, 3FFF, 3FFF
data 3FFF, 3FFF, 3FFF, 3FFF, 3FFF, 3FFF
data 3FFF, 3FFF, 3FFF, 3FFF, 3FFF, 3FFF
data 3FFF, 3FFF, 3FFF, 3FFF, 3FFF, 3FFF
data 3FFF, 3FFF, 12B, 1, 3FFF, 3FFF, 3FFF
data 3FFF
res 7000
data  3FFF
data 3FFF, 3FFF, 3FFF
res 3
andlw   0D4
btfss   byte_DATA_1FF, 7


; Segment type: Internal processor memory & SFR
; .data (DATA)
; assume bank = 0
; assume pclath = 0
BANK0_INDF0 equ 0
BANK0_INDF1 equ 1
BANK0_PCL equ 2
BANK0_STATUS equ 3
 C equ 0
 DC equ 1
 Z equ 2
 NOT_PD equ 3
 NOT_TO equ 4

BANK0_FSR0 equ 4
BANK0_FSR0H equ 5
BANK0_FSR1 equ 6
BANK0_FSR1H equ 7
BANK0_BSR equ 8
 BSR0 equ 0
 BSR1 equ 1
 BSR2 equ 2
 BSR3 equ 3
 BSR4 equ 4

BANK0_WREG equ 9
BANK0_PCLATH equ 0A
BANK0_INTCON equ 0B
 IOCIF equ 0
 INTF equ 1
 T0IF equ 2
 IOCIE equ 3
 INTE equ 4
 T0IE equ 5
 PEIE equ 6
 GIE equ 7

BANK0_PORTA equ 0C
 RA0 equ 0
 RA1 equ 1
 RA2 equ 2
 RA3 equ 3
 RA4 equ 4
 RA5 equ 5


BANK0_PORTC equ 0E
 RC0 equ 0
 RC1 equ 1
 RC2 equ 2
 RC3 equ 3
 RC4 equ 4
 RC5 equ 5


BANK0_PIR1 equ 11
 TMR1IF equ 0
 TMR2IF equ 1
 CCPIF equ 2
 SSP1IF equ 3
 TXIF equ 4
 RCIF equ 5
 ADIF equ 6
 TMR1GIF equ 7

BANK0_PIR2 equ 12
 CCP2IF equ 0
 TMR4IF equ 1
 TMR6IF equ 2
 BCL1IF equ 3
 C1IF equ 5
 C2IF equ 6
 OSFIF equ 7

BANK0_PIR3 equ 13
 CLC1IF equ 0
 CLC2IF equ 1
 CLC3IF equ 2
 ZCDIF equ 4
 COGIF equ 5


BANK0_TMR0 equ 15
BANK0_TMR1 equ 16
BANK0_TMR1H equ 17
BANK0_T1CON equ 18
 TMR1ON equ 0
 NOT_T1SYNC equ 2
 T1OSCEN equ 3
 T1CKPS0 equ 4
 T1CKPS1 equ 5
 TMR1CS0 equ 6
 TMR1CS1 equ 7

BANK0_T1GCON equ 19
 T1GSS0 equ 0
 T1GSS1 equ 1
 T1GVAL equ 2
 T1GGO_NOT_DONE equ 3
 T1GSPM equ 4
 T1GTM equ 5
 T1GPOL equ 6
 TMR1GE equ 7

BANK0_TMR2 equ 1A
BANK0_PR2 equ 1B
BANK0_T2CON equ 1C
 T2CKPS0 equ 0
 T2CKPS1 equ 1
 TMR2ON equ 2
 T2OUTPS0 equ 3
 T2OUTPS1 equ 4
 T2OUTPS2 equ 5
 T2OUTPS3 equ 6


byte_DATA_20 equ 20
byte_DATA_21 equ 21
byte_DATA_22 equ 22
byte_DATA_23 equ 23
byte_DATA_24 equ 24
byte_DATA_25 equ 25
byte_DATA_26 equ 26
byte_DATA_27 equ 27
byte_DATA_28 equ 28
byte_DATA_29 equ 29
byte_DATA_2A equ 2A
byte_DATA_2B equ 2B
byte_DATA_2C equ 2C
byte_DATA_2D equ 2D
byte_DATA_2E equ 2E
byte_DATA_2F equ 2F
byte_DATA_30 equ 30
byte_DATA_31 equ 31
byte_DATA_32 equ 32
byte_DATA_33 equ 33
byte_DATA_34 equ 34
byte_DATA_35 equ 35
byte_DATA_36 equ 36
byte_DATA_37 equ 37
byte_DATA_38 equ 38
byte_DATA_39 equ 39
byte_DATA_3A equ 3A
byte_DATA_3B equ 3B
byte_DATA_3C equ 3C
byte_DATA_3D equ 3D
byte_DATA_3E equ 3E
byte_DATA_3F equ 3F
byte_DATA_40 equ 40
byte_DATA_41 equ 41
byte_DATA_42 equ 42
byte_DATA_43 equ 43
byte_DATA_44 equ 44
byte_DATA_45 equ 45
byte_DATA_46 equ 46
byte_DATA_47 equ 47
byte_DATA_48 equ 48
byte_DATA_49 equ 49
byte_DATA_4A equ 4A
byte_DATA_4B equ 4B
byte_DATA_4C equ 4C

byte_DATA_4E equ 4E
byte_DATA_4F equ 4F
byte_DATA_50 equ 50
byte_DATA_51 equ 51
byte_DATA_52 equ 52
byte_DATA_53 equ 53

byte_DATA_56 equ 56
byte_DATA_57 equ 57
byte_DATA_70 equ 70
byte_DATA_71 equ 71
byte_DATA_72 equ 72
byte_DATA_73 equ 73
byte_DATA_74 equ 74
byte_DATA_75 equ 75
byte_DATA_76 equ 76
byte_DATA_77 equ 77
byte_DATA_78 equ 78
byte_DATA_79 equ 79
byte_DATA_7A equ 7A
byte_DATA_7B equ 7B
byte_DATA_7C equ 7C
byte_DATA_7D equ 7D
byte_DATA_7E equ 7E
byte_DATA_7F equ 7F
BANK1_INDF0 equ 80
BANK1_INDF1 equ 81
BANK1_PCL equ 82
BANK1_STATUS equ 83
 C equ 0
 DC equ 1
 Z equ 2
 NOT_PD equ 3
 NOT_TO equ 4

BANK1_FSR0 equ 84
BANK1_FSR0H equ 85
BANK1_FSR1 equ 86
BANK1_FSR1H equ 87
BANK1_BSR equ 88
 BSR0 equ 0
 BSR1 equ 1
 BSR2 equ 2
 BSR3 equ 3
 BSR4 equ 4

BANK1_WREG equ 89
BANK1_PCLATH equ 8A
BANK1_INTCON equ 8B
 IOCIF equ 0
 INTF equ 1
 T0IF equ 2
 IOCIE equ 3
 INTE equ 4
 T0IE equ 5
 PEIE equ 6
 GIE equ 7

BANK1_TRISA equ 8C
 TRISA0 equ 0
 TRISA1 equ 1
 TRISA2 equ 2
 TRISA4 equ 4
 TRISA5 equ 5


BANK1_TRISC equ 8E
 TRISC0 equ 0
 TRISC1 equ 1
 TRISC2 equ 2
 TRISC3 equ 3
 TRISC4 equ 4
 TRISC5 equ 5


BANK1_PIE1 equ 91
 TMR1IE equ 0
 TMR2IE equ 1
 CCPIE equ 2
 SSP1IE equ 3
 TXIE equ 4
 RCIE equ 5
 ADIE equ 6
 TMR1GIE equ 7

BANK1_PIE2 equ 92
 CCP2IE equ 0
 TMR4IE equ 1
 TMR6IE equ 2
 BCL1IE equ 3
 C1IE equ 5
 C2IE equ 6
 OSFIE equ 7

BANK1_PIE3 equ 93
 CLC1IE equ 0
 CLC2IE equ 1
 CLC3IE equ 2
 ZCDIE equ 4
 COGIE equ 5


BANK1_OPTION_REG equ 95
 PS0 equ 0
 PS1 equ 1
 PS2 equ 2
 PSA equ 3
 T0SE equ 4
 T0CS equ 5
 INTEDG equ 6
 NOT_WPUEN equ 7

BANK1_PCON equ 96
 NOT_BOR equ 0
 NOT_POR equ 1
 NOT_RI equ 2
 NOT_RMCLR equ 3
 NOT_RWDT equ 4
 STKUNF equ 6
 STKOVF equ 7

BANK1_WDTCON equ 97
 SWDTEN equ 0
 WDTPS0 equ 1
 WDTPS1 equ 2
 WDTPS2 equ 3
 WDTPS3 equ 4
 WDTPS4 equ 5

BANK1_OSCTUNE equ 98
 TUN0 equ 0
 TUN1 equ 1
 TUN2 equ 2
 TUN3 equ 3
 TUN4 equ 4
 TUN5 equ 5

BANK1_OSCCON equ 99
 SCS0 equ 0
 SCS1 equ 1
 IRCF0 equ 3
 IRCF1 equ 4
 IRCF2 equ 5
 IRCF3 equ 6
 SPLLEN equ 7

BANK1_OSCSTAT equ 9A
 HFIOFS equ 0
 LFIOFR equ 1
 MFIOFR equ 2
 HFIOFL equ 3
 HFIOFR equ 4
 OSTS equ 5
 PLLR equ 6
 SOSCR equ 7

BANK1_ADRES equ 9B
BANK1_ADRESH equ 9C
BANK1_ADCON0 equ 9D
 ADON equ 0
 GO equ 1
 CHS0 equ 2
 CHS1 equ 3
 CHS2 equ 4
 CHS3 equ 5
 CHS4 equ 6

BANK1_ADCON1 equ 9E
 ADPREF0 equ 0
 ADPREF1 equ 1
 ADNREF equ 2
 ADCS0 equ 4
 ADCS1 equ 5
 ADCS2 equ 6
 ADFM equ 7

BANK1_ADCON2 equ 9F
 TRIGSEL0 equ 4
 TRIGSEL1 equ 5
 TRIGSEL2 equ 6
 TRIGSEL3 equ 7

byte_DATA_A0 equ 0A0
byte_DATA_A1 equ 0A1
byte_DATA_A2 equ 0A2
byte_DATA_A3 equ 0A3
byte_DATA_A4 equ 0A4
byte_DATA_A5 equ 0A5
byte_DATA_A6 equ 0A6
byte_DATA_A7 equ 0A7
byte_DATA_A8 equ 0A8
byte_DATA_A9 equ 0A9
byte_DATA_AA equ 0AA
byte_DATA_AB equ 0AB
byte_DATA_AC equ 0AC
byte_DATA_AD equ 0AD
byte_DATA_AE equ 0AE
byte_DATA_AF equ 0AF
byte_DATA_B0 equ 0B0
byte_DATA_B1 equ 0B1
byte_DATA_B2 equ 0B2
byte_DATA_B3 equ 0B3

byte_DATA_BC equ 0BC
byte_DATA_BD equ 0BD
byte_DATA_BE equ 0BE
byte_DATA_BF equ 0BF
byte_DATA_C0 equ 0C0
byte_DATA_C1 equ 0C1
byte_DATA_C2 equ 0C2
byte_DATA_C3 equ 0C3
byte_DATA_C4 equ 0C4
byte_DATA_C5 equ 0C5
byte_DATA_C6 equ 0C6
byte_DATA_C7 equ 0C7
byte_DATA_C8 equ 0C8
byte_DATA_C9 equ 0C9
byte_DATA_CA equ 0CA
byte_DATA_CB equ 0CB
byte_DATA_CC equ 0CC
byte_DATA_CD equ 0CD
byte_DATA_CE equ 0CE
byte_DATA_CF equ 0CF
byte_DATA_D0 equ 0D0
byte_DATA_D1 equ 0D1
byte_DATA_D2 equ 0D2
byte_DATA_D3 equ 0D3
byte_DATA_D4 equ 0D4
byte_DATA_D5 equ 0D5
byte_DATA_D6 equ 0D6
byte_DATA_D7 equ 0D7
byte_DATA_D8 equ 0D8
byte_DATA_D9 equ 0D9
byte_DATA_DA equ 0DA
byte_DATA_DB equ 0DB
byte_DATA_DC equ 0DC
byte_DATA_DD equ 0DD
byte_DATA_DE equ 0DE
byte_DATA_DF equ 0DF
byte_DATA_E0 equ 0E0
byte_DATA_E1 equ 0E1
byte_DATA_E2 equ 0E2
byte_DATA_E3 equ 0E3
byte_DATA_E4 equ 0E4
byte_DATA_E5 equ 0E5
byte_DATA_E6 equ 0E6
byte_DATA_E7 equ 0E7
byte_DATA_E8 equ 0E8
byte_DATA_E9 equ 0E9
byte_DATA_EA equ 0EA
byte_DATA_EB equ 0EB
byte_DATA_EC equ 0EC
byte_DATA_F0 equ 0F0
byte_DATA_F1 equ 0F1
byte_DATA_F2 equ 0F2

byte_DATA_FE equ 0FE

BANK2_INDF0 equ 100
BANK2_INDF1 equ 101
BANK2_PCL equ 102
BANK2_STATUS equ 103
 C equ 0
 DC equ 1
 Z equ 2
 NOT_PD equ 3
 NOT_TO equ 4

BANK2_FSR0 equ 104
BANK2_FSR0H equ 105
BANK2_FSR1 equ 106
BANK2_FSR1H equ 107
BANK2_BSR equ 108
 BSR0 equ 0
 BSR1 equ 1
 BSR2 equ 2
 BSR3 equ 3
 BSR4 equ 4

BANK2_WREG equ 109
BANK2_PCLATH equ 10A
BANK2_INTCON equ 10B
 IOCIF equ 0
 INTF equ 1
 T0IF equ 2
 IOCIE equ 3
 INTE equ 4
 T0IE equ 5
 PEIE equ 6
 GIE equ 7

BANK2_LATA equ 10C
 LATA0 equ 0
 LATA1 equ 1
 LATA2 equ 2
 LATA4 equ 4
 LATA5 equ 5


BANK2_LATC equ 10E
 LATC0 equ 0
 LATC1 equ 1
 LATC2 equ 2
 LATC3 equ 3
 LATC4 equ 4
 LATC5 equ 5


BANK2_CM1CON0 equ 111
 C1SYNC equ 0
 C1HYS equ 1
 C1SP equ 2
 C1ZLF equ 3
 C1POL equ 4
 C1OUT equ 6
 C1ON equ 7

BANK2_CM1CON1 equ 112
 C1NCH0 equ 0
 C1NCH1 equ 1
 C1NCH2 equ 2
 C1PCH0 equ 3
 C1PCH1 equ 4
 C1PCH2 equ 5
 C1INTN equ 6
 C1INTP equ 7

BANK2_CM2CON0 equ 113
 C2SYNC equ 0
 C2HYS equ 1
 C2SP equ 2
 C2ZLF equ 3
 C2POL equ 4
 C2OUT equ 6
 C2ON equ 7

BANK2_CM2CON1 equ 114
 C2NCH0 equ 0
 C2NCH1 equ 1
 C2NCH2 equ 2
 C2PCH0 equ 3
 C2PCH1 equ 4
 C2PCH2 equ 5
 C2INTN equ 6
 C2INTP equ 7

BANK2_CMOUT equ 115
 MC1OUT equ 0
 MC2OUT equ 1

BANK2_BORCON equ 116
 BORRDY equ 0
 BORFS equ 6
 SBOREN equ 7

BANK2_FVRCON equ 117
 ADFVR0 equ 0
 ADFVR1 equ 1
 CDAFVR0 equ 2
 CDAFVR1 equ 3
 TSRNG equ 4
 TSEN equ 5
 FVRRDY equ 6
 FVREN equ 7

BANK2_DAC1CON0 equ 118
 DACNSS equ 0
 DACPSS0 equ 2
 DACPSS1 equ 3
 DACOE0 equ 4
 DACOE1 equ 5
 DACEN equ 7

BANK2_DAC1CON1 equ 119
 DACR0 equ 0
 DACR1 equ 1
 DACR2 equ 2
 DACR3 equ 3
 DACR4 equ 4
 DACR5 equ 5
 DACR6 equ 6
 DACR7 equ 7


BANK2_ZCD1CON equ 11C
 ZCD1INTN equ 0
 ZCD1INTP equ 1
 ZCD1POL equ 4
 ZCD1OUT equ 5
 ZCD1EN equ 7


byte_DATA_124 equ 124
byte_DATA_125 equ 125
byte_DATA_170 equ 170

BANK3_INDF0 equ 180
BANK3_INDF1 equ 181
BANK3_PCL equ 182
BANK3_STATUS equ 183
 C equ 0
 DC equ 1
 Z equ 2
 NOT_PD equ 3
 NOT_TO equ 4

BANK3_FSR0 equ 184
BANK3_FSR0H equ 185
BANK3_FSR1 equ 186
BANK3_FSR1H equ 187
BANK3_BSR equ 188
 BSR0 equ 0
 BSR1 equ 1
 BSR2 equ 2
 BSR3 equ 3
 BSR4 equ 4

BANK3_WREG equ 189
BANK3_PCLATH equ 18A
BANK3_INTCON equ 18B
 IOCIF equ 0
 INTF equ 1
 T0IF equ 2
 IOCIE equ 3
 INTE equ 4
 T0IE equ 5
 PEIE equ 6
 GIE equ 7

BANK3_ANSELA equ 18C
 ANSA0 equ 0
 ANSA1 equ 1
 ANSA2 equ 2
 ANSA4 equ 4
 ANS5 equ 5


BANK3_ANSELC equ 18E
 ANSC0 equ 0
 ANSC1 equ 1
 ANSC2 equ 2
 ANSC3 equ 3
 ANSC4 equ 4
 ANSC5 equ 5


BANK3_PMADR equ 191
BANK3_PMADRH equ 192
BANK3_PMDAT equ 193
BANK3_PMDATH equ 194
BANK3_PMCON1 equ 195
 RD equ 0
 WR equ 1
 WREN equ 2
 WRERR equ 3
 FREE equ 4
 LWLO equ 5
 CFGS equ 6

BANK3_PMCON2 equ 196
BANK3_VREGCON equ 197
 Reserved equ 0
 VREGPM equ 1


BANK3_RC1REG equ 199
BANK3_TX1REG equ 19A
BANK3_SP1BRG equ 19B
BANK3_SP1BRGH equ 19C
BANK3_RC1STA equ 19D
 RX9D equ 0
 OERR equ 1
 FERR equ 2
 ADDEN equ 3
 CREN equ 4
 SREN equ 5
 RX9 equ 6
 SPEN equ 7

BANK3_TX1STA equ 19E
 TX9D equ 0
 TRMT equ 1
 BRGH equ 2
 SENDB equ 3
 SYNC equ 4
 TXEN equ 5
 TX9 equ 6
 CSRC equ 7

BANK3_BAUD1CON equ 19F
 ABDEN equ 0
 WUE equ 1
 BRG16 equ 3
 SCKP equ 4
 RCIDL equ 6
 ABDOVF equ 7


byte_DATA_1C8 equ 1C8
byte_DATA_1C9 equ 1C9
byte_DATA_1CA equ 1CA
byte_DATA_1CB equ 1CB
byte_DATA_1CC equ 1CC
byte_DATA_1CD equ 1CD
byte_DATA_1CE equ 1CE
byte_DATA_1CF equ 1CF
byte_DATA_1D0 equ 1D0
byte_DATA_1D1 equ 1D1
byte_DATA_1D2 equ 1D2
byte_DATA_1D3 equ 1D3
byte_DATA_1D4 equ 1D4
byte_DATA_1D5 equ 1D5
byte_DATA_1D6 equ 1D6
byte_DATA_1D7 equ 1D7
byte_DATA_1D8 equ 1D8
byte_DATA_1D9 equ 1D9
byte_DATA_1DA equ 1DA
byte_DATA_1DB equ 1DB
byte_DATA_1DC equ 1DC
byte_DATA_1DD equ 1DD
byte_DATA_1DE equ 1DE
byte_DATA_1DF equ 1DF
byte_DATA_1E0 equ 1E0
byte_DATA_1E1 equ 1E1

byte_DATA_1FF equ 1FF
BANK4_INDF0 equ 200
BANK4_INDF1 equ 201
BANK4_PCL equ 202
BANK4_STATUS equ 203
 C equ 0
 DC equ 1
 Z equ 2
 NOT_PD equ 3
 NOT_TO equ 4

BANK4_FSR0 equ 204
BANK4_FSR0H equ 205
BANK4_FSR1 equ 206
BANK4_FSR1H equ 207
BANK4_BSR equ 208
 BSR0 equ 0
 BSR1 equ 1
 BSR2 equ 2
 BSR3 equ 3
 BSR4 equ 4

BANK4_WREG equ 209
BANK4_PCLATH equ 20A
BANK4_INTCON equ 20B
 IOCIF equ 0
 INTF equ 1
 T0IF equ 2
 IOCIE equ 3
 INTE equ 4
 T0IE equ 5
 PEIE equ 6
 GIE equ 7

BANK4_WPUA equ 20C
 WPUA0 equ 0
 WPUA1 equ 1
 WPUA2 equ 2
 WPUA3 equ 3
 WPUA4 equ 4
 WPUA5 equ 5


BANK4_WPUC equ 20E
 WPUC0 equ 0
 WPUC1 equ 1
 WPUC2 equ 2
 WPUC3 equ 3
 WPUC4 equ 4
 WPUC5 equ 5


BANK4_SSP1BUF equ 211
 BUF0 equ 0
 BUF1 equ 1
 BUF2 equ 2
 BUF3 equ 3
 BUF4 equ 4
 BUF5 equ 5
 BUF6 equ 6
 BUF7 equ 7

BANK4_SSP1ADD equ 212
 ADD0 equ 0
 ADD1 equ 1
 ADD2 equ 2
 ADD3 equ 3
 ADD4 equ 4
 ADD5 equ 5
 ADD6 equ 6
 ADD7 equ 7

BANK4_SSP1MSK equ 213
 MSK0 equ 0
 MSK1 equ 1
 MSK2 equ 2
 MSK3 equ 3
 MSK4 equ 4
 MSK5 equ 5
 MSK6 equ 6
 MSK7 equ 7

BANK4_SSP1STAT equ 214
 BF equ 0
 UA equ 1
 R_NOT_W equ 2
 S equ 3
 P equ 4
 D_NOT_A equ 5
 CKE equ 6
 SMP equ 7

BANK4_SSP1CON equ 215
 SSPM0 equ 0
 SSPM1 equ 1
 SSPM2 equ 2
 SSPM3 equ 3
 CKP equ 4
 SSPEN equ 5
 SSPOV equ 6
 WCOL equ 7

BANK4_SSP1CON2 equ 216
 SEN equ 0
 RSEN equ 1
 PEN equ 2
 RCEN equ 3
 ACKEN equ 4
 ACKDT equ 5
 ACKSTAT equ 6
 GCEN equ 7

BANK4_SSP1CON3 equ 217
 DHEN equ 0
 AHEN equ 1
 SBCDE equ 2
 SDAHT equ 3
 BOEN equ 4
 SCIE equ 5
 PCIE equ 6
 ACKTIM equ 7


byte_DATA_25E equ 25E
byte_DATA_25F equ 25F

byte_DATA_27D equ 27D

BANK5_INDF0 equ 280
BANK5_INDF1 equ 281
BANK5_PCL equ 282
BANK5_STATUS equ 283
 C equ 0
 DC equ 1
 Z equ 2
 NOT_PD equ 3
 NOT_TO equ 4

BANK5_FSR0 equ 284
BANK5_FSR0H equ 285
BANK5_FSR1 equ 286
BANK5_FSR1H equ 287
BANK5_BSR equ 288
 BSR0 equ 0
 BSR1 equ 1
 BSR2 equ 2
 BSR3 equ 3
 BSR4 equ 4

BANK5_WREG equ 289
BANK5_PCLATH equ 28A
BANK5_INTCON equ 28B
 IOCIF equ 0
 INTF equ 1
 T0IF equ 2
 IOCIE equ 3
 INTE equ 4
 T0IE equ 5
 PEIE equ 6
 GIE equ 7

BANK5_ODCONA equ 28C
 ODA0 equ 0
 ODA1 equ 1
 ODA2 equ 2
 ODA4 equ 4
 ODA5 equ 5


BANK5_ODCONC equ 28E
 ODC0 equ 0
 ODC1 equ 1
 ODC2 equ 2
 ODC3 equ 3
 ODC4 equ 4
 ODC5 equ 5


BANK5_CCPR1 equ 291
BANK5_CCPR1H equ 292
BANK5_CCP1CON equ 293
 CCP1M0 equ 0
 CCP1M1 equ 1
 CCP1M2 equ 2
 CCP1M3 equ 3
 CCP1Y equ 4
 CCP1X equ 5


BANK5_CCPR2 equ 298
BANK5_CCPR2H equ 299
BANK5_CCP2CON equ 29A
 CCP2M0 equ 0
 CCP2M1 equ 1
 CCP2M2 equ 2
 CCP2M3 equ 3
 CCP2Y equ 4
 CCP2X equ 5


BANK5_CCPTMRS equ 29E
 C1TSEL0 equ 0
 C1TSEL1 equ 1
 C2TSEL0 equ 2
 C2TSEL1 equ 3
 P3TSEL0 equ 4
 P3TSEL1 equ 5
 P4TSEL0 equ 6
 P4TSEL1 equ 7


BANK6_INDF0 equ 300
BANK6_INDF1 equ 301
BANK6_PCL equ 302
BANK6_STATUS equ 303
 C equ 0
 DC equ 1
 Z equ 2
 NOT_PD equ 3
 NOT_TO equ 4

BANK6_FSR0 equ 304
BANK6_FSR0H equ 305
BANK6_FSR1 equ 306
BANK6_FSR1H equ 307
BANK6_BSR equ 308
 BSR0 equ 0
 BSR1 equ 1
 BSR2 equ 2
 BSR3 equ 3
 BSR4 equ 4

BANK6_WREG equ 309
BANK6_PCLATH equ 30A
BANK6_INTCON equ 30B
 IOCIF equ 0
 INTF equ 1
 T0IF equ 2
 IOCIE equ 3
 INTE equ 4
 T0IE equ 5
 PEIE equ 6
 GIE equ 7

BANK6_SLRCONA equ 30C
 SLRA0 equ 0
 SLRA1 equ 1
 SLRA2 equ 2
 SLRA4 equ 4
 SLRA5 equ 5


BANK6_SLRCONC equ 30E
 SLRC0 equ 0
 SLRC1 equ 1
 SLRC2 equ 2
 SLRC3 equ 3
 SLRC4 equ 4
 SLRC5 equ 5


BANK7_INDF0 equ 380
BANK7_INDF1 equ 381
BANK7_PCL equ 382
BANK7_STATUS equ 383
 C equ 0
 DC equ 1
 Z equ 2
 NOT_PD equ 3
 NOT_TO equ 4

BANK7_FSR0 equ 384
BANK7_FSR0H equ 385
BANK7_FSR1 equ 386
BANK7_FSR1H equ 387
BANK7_BSR equ 388
 BSR0 equ 0
 BSR1 equ 1
 BSR2 equ 2
 BSR3 equ 3
 BSR4 equ 4

BANK7_WREG equ 389
BANK7_PCLATH equ 38A
BANK7_INTCON equ 38B
 IOCIF equ 0
 INTF equ 1
 T0IF equ 2
 IOCIE equ 3
 INTE equ 4
 T0IE equ 5
 PEIE equ 6
 GIE equ 7

BANK7_INLVLA equ 38C
 INLVLA0 equ 0
 INLVLA1 equ 1
 INLVLA2 equ 2
 INLVLA3 equ 3
 INLVLA4 equ 4
 INLVLA5 equ 5


BANK7_INLVLC equ 38E
 INLVLC0 equ 0
 INLVLC1 equ 1
 INLVLC2 equ 2
 INLVLC3 equ 3
 INLVLC4 equ 4
 INLVLC5 equ 5


BANK7_IOCAP equ 391
 IOCAP0 equ 0
 IOCAP1 equ 1
 IOCAP2 equ 2
 IOCAP3 equ 3
 IOCAP4 equ 4
 IOCAP5 equ 5

BANK7_IOCAN equ 392
 IOCAN0 equ 0
 IOCAN1 equ 1
 IOCAN2 equ 2
 IOCAN3 equ 3
 IOCAN4 equ 4
 IOCAN5 equ 5

BANK7_IOCAF equ 393
 IOCAF0 equ 0
 IOCAF1 equ 1
 IOCAF2 equ 2
 IOCAF3 equ 3
 IOCAF4 equ 4
 IOCAF5 equ 5


BANK7_IOCCP equ 397
 IOCCP0 equ 0
 IOCCP1 equ 1
 IOCCP2 equ 2
 IOCCP3 equ 3
 IOCCP4 equ 4
 IOCCP5 equ 5

BANK7_IOCCN equ 398
 IOCCN0 equ 0
 IOCCN1 equ 1
 IOCCN2 equ 2
 IOCCN3 equ 3
 IOCCN4 equ 4
 IOCCN5 equ 5

BANK7_IOCCF equ 399
 IOCCF0 equ 0
 IOCCF1 equ 1
 IOCCF2 equ 2
 IOCCF3 equ 3
 IOCCF4 equ 4
 IOCCF5 equ 5


BANK8_INDF0 equ 400
BANK8_INDF1 equ 401
BANK8_PCL equ 402
BANK8_STATUS equ 403
 C equ 0
 DC equ 1
 Z equ 2
 NOT_PD equ 3
 NOT_TO equ 4

BANK8_FSR0 equ 404
BANK8_FSR0H equ 405
BANK8_FSR1 equ 406
BANK8_FSR1H equ 407
BANK8_BSR equ 408
 BSR0 equ 0
 BSR1 equ 1
 BSR2 equ 2
 BSR3 equ 3
 BSR4 equ 4

BANK8_WREG equ 409
BANK8_PCLATH equ 40A
BANK8_INTCON equ 40B
 IOCIF equ 0
 INTF equ 1
 T0IF equ 2
 IOCIE equ 3
 INTE equ 4
 T0IE equ 5
 PEIE equ 6
 GIE equ 7


BANK8_TMR4 equ 415
BANK8_PR4 equ 416
BANK8_T4CON equ 417
 T4CKPS0 equ 0
 T4CKPS1 equ 1
 TMR4ON equ 2
 T4OUTPS0 equ 3
 T4OUTPS1 equ 4
 T4OUTPS2 equ 5
 T4OUTPS3 equ 6


BANK8_TMR6 equ 41C
BANK8_PR6 equ 41D
BANK8_T6CON equ 41E
 T6CKPS0 equ 0
 T6CKPS1 equ 1
 TMR6ON equ 2
 T6OUTPS0 equ 3
 T6OUTPS1 equ 4
 T6OUTPS2 equ 5
 T6OUTPS3 equ 6


BANK9_INDF0 equ 480
BANK9_INDF1 equ 481
BANK9_PCL equ 482
BANK9_STATUS equ 483
 C equ 0
 DC equ 1
 Z equ 2
 NOT_PD equ 3
 NOT_TO equ 4

BANK9_FSR0 equ 484
BANK9_FSR0H equ 485
BANK9_FSR1 equ 486
BANK9_FSR1H equ 487
BANK9_BSR equ 488
 BSR0 equ 0
 BSR1 equ 1
 BSR2 equ 2
 BSR3 equ 3
 BSR4 equ 4

BANK9_WREG equ 489
BANK9_PCLATH equ 48A
BANK9_INTCON equ 48B
 IOCIF equ 0
 INTF equ 1
 T0IF equ 2
 IOCIE equ 3
 INTE equ 4
 T0IE equ 5
 PEIE equ 6
 GIE equ 7


BANK10_INDF0 equ 500
BANK10_INDF1 equ 501
BANK10_PCL equ 502
BANK10_STATUS equ 503
 C equ 0
 DC equ 1
 Z equ 2
 NOT_PD equ 3
 NOT_TO equ 4

BANK10_FSR0 equ 504
BANK10_FSR0H equ 505
BANK10_FSR1 equ 506
BANK10_FSR1H equ 507
BANK10_BSR equ 508
 BSR0 equ 0
 BSR1 equ 1
 BSR2 equ 2
 BSR3 equ 3
 BSR4 equ 4

BANK10_WREG equ 509
BANK10_PCLATH equ 50A
BANK10_INTCON equ 50B
 IOCIF equ 0
 INTF equ 1
 T0IF equ 2
 IOCIE equ 3
 INTE equ 4
 T0IE equ 5
 PEIE equ 6
 GIE equ 7


BANK10_OPA1CON equ 511
 OPA1PCH0 equ 0
 OPA1PCH1 equ 1
 OPA1UG equ 4
 OPA1SP equ 6
 OPA1EN equ 7


BANK10_OPA2CON equ 515
 OPA2PCH0 equ 0
 OPA2PCH1 equ 1
 OPA2UG equ 4
 OPA2SP equ 6
 OPA2EN equ 7


BANK11_INDF0 equ 580
BANK11_INDF1 equ 581
BANK11_PCL equ 582
BANK11_STATUS equ 583
 C equ 0
 DC equ 1
 Z equ 2
 NOT_PD equ 3
 NOT_TO equ 4

BANK11_FSR0 equ 584
BANK11_FSR0H equ 585
BANK11_FSR1 equ 586
BANK11_FSR1H equ 587
BANK11_BSR equ 588
 BSR0 equ 0
 BSR1 equ 1
 BSR2 equ 2
 BSR3 equ 3
 BSR4 equ 4

BANK11_WREG equ 589
BANK11_PCLATH equ 58A
BANK11_INTCON equ 58B
 IOCIF equ 0
 INTF equ 1
 T0IF equ 2
 IOCIE equ 3
 INTE equ 4
 T0IE equ 5
 PEIE equ 6
 GIE equ 7


BANK12_INDF0 equ 600
BANK12_INDF1 equ 601
BANK12_PCL equ 602
BANK12_STATUS equ 603
 C equ 0
 DC equ 1
 Z equ 2
 NOT_PD equ 3
 NOT_TO equ 4

BANK12_FSR0 equ 604
BANK12_FSR0H equ 605
BANK12_FSR1 equ 606
BANK12_FSR1H equ 607
BANK12_BSR equ 608
 BSR0 equ 0
 BSR1 equ 1
 BSR2 equ 2
 BSR3 equ 3
 BSR4 equ 4

BANK12_WREG equ 609
BANK12_PCLATH equ 60A
BANK12_INTCON equ 60B
 IOCIF equ 0
 INTF equ 1
 T0IF equ 2
 IOCIE equ 3
 INTE equ 4
 T0IE equ 5
 PEIE equ 6
 GIE equ 7


BANK12_PWM3DCL equ 617
 PWM3DCL0 equ 6
 PWM3DCL1 equ 7

BANK12_PWM3DCH equ 618
 PWM3DCH0 equ 0
 PWM3DCH1 equ 1
 PWM3DCH2 equ 2
 PWM3DCH3 equ 3
 PWM3DCH4 equ 4
 PWM3DCH5 equ 5
 PWM3DCH6 equ 6
 PWM3DCH7 equ 7

BANK12_PWM3CON equ 619
 PWM3POL equ 4
 PWM3OUT equ 5
 PWM3EN equ 7

BANK12_PWM4DCL equ 61A
 PWM4DCL0 equ 6
 PWM4DCL1 equ 7

BANK12_PWM4DCH equ 61B
 PWM4DCH0 equ 0
 PWM4DCH1 equ 1
 PWM4DCH2 equ 2
 PWM4DCH3 equ 3
 PWM4DCH4 equ 4
 PWM4DCH5 equ 5
 PWM4DCH6 equ 6
 PWM4DCH7 equ 7

BANK12_PWM4CON equ 61C
 PWM4POL equ 4
 PWM4OUT equ 5
 PWM4EN equ 7


BANK13_INDF0 equ 680
BANK13_INDF1 equ 681
BANK13_PCL equ 682
BANK13_STATUS equ 683
 C equ 0
 DC equ 1
 Z equ 2
 NOT_PD equ 3
 NOT_TO equ 4

BANK13_FSR0 equ 684
BANK13_FSR0H equ 685
BANK13_FSR1 equ 686
BANK13_FSR1H equ 687
BANK13_BSR equ 688
 BSR0 equ 0
 BSR1 equ 1
 BSR2 equ 2
 BSR3 equ 3
 BSR4 equ 4

BANK13_WREG equ 689
BANK13_PCLATH equ 68A
BANK13_INTCON equ 68B
 IOCIF equ 0
 INTF equ 1
 T0IF equ 2
 IOCIE equ 3
 INTE equ 4
 T0IE equ 5
 PEIE equ 6
 GIE equ 7


BANK13_COG1PHR equ 691
 G1PHR0 equ 0
 G1PHR1 equ 1
 G1PHR2 equ 2
 G1PHR3 equ 3
 G1PHR4 equ 4
 G1PHR5 equ 5

BANK13_COG1PHF equ 692
 G1PHF0 equ 0
 G1PHF1 equ 1
 G1PHF2 equ 2
 G1PHF3 equ 3
 G1PHF4 equ 4
 G1PHF5 equ 5

BANK13_COG1BLKR equ 693
 G1BLKR0 equ 0
 G1BLKR1 equ 1
 G1BLKR2 equ 2
 G1BLKR3 equ 3
 G1BLKR4 equ 4
 G1BLKR5 equ 5

BANK13_COG1BLKF equ 694
 G1BLKF0 equ 0
 G1BLKF1 equ 1
 G1BLKF2 equ 2
 G1BLKF3 equ 3
 G1BLKF4 equ 4
 G1BLKF5 equ 5

BANK13_COG1DBR equ 695
 G1DBR0 equ 0
 G1DBR1 equ 1
 G1DBR2 equ 2
 G1DBR3 equ 3
 G1DBR4 equ 4
 G1DBR5 equ 5

BANK13_COG1DBF equ 696
 G1DBF0 equ 0
 G1DBF1 equ 1
 G1DBF2 equ 2
 G1DBF3 equ 3
 G1DBF4 equ 4
 G1DBF5 equ 5

BANK13_COG1CON0 equ 697
 G1MD0 equ 0
 G1MD1 equ 1
 G1MD2 equ 2
 G1CS0 equ 3
 G1CS1 equ 4
 G1LD equ 6
 G1EN equ 7

BANK13_COG1CON1 equ 698
 G1POLA equ 0
 G1POLB equ 1
 G1POLC equ 2
 G1POLD equ 3
 G1FDBS equ 6
 G1RDBS equ 7

BANK13_COG1RIS equ 699
 G1RIS0 equ 0
 G1RIS1 equ 1
 G1RIS2 equ 2
 G1RIS3 equ 3
 G1RIS4 equ 4
 G1RIS5 equ 5
 G1RIS6 equ 6

BANK13_COG1RSIM equ 69A
 G1RSIM0 equ 0
 G1RSIM1 equ 1
 G1RSIM2 equ 2
 G1RSIM3 equ 3
 G1RSIM4 equ 4
 G1RSIM5 equ 5
 G1RSIM6 equ 6

BANK13_COG1FIS equ 69B
 G1FIS0 equ 0
 G1FIS1 equ 1
 G1FIS2 equ 2
 G1FIS3 equ 3
 G1FIS4 equ 4
 G1FIS5 equ 5
 G1FIS6 equ 6

BANK13_COG1FSIM equ 69C
 G1FSIM0 equ 0
 G1FSIM1 equ 1
 G1FSIM2 equ 2
 G1FSIM3 equ 3
 G1FSIM4 equ 4
 G1FSIM5 equ 5
 G1FSIM6 equ 6

BANK13_COG1ASD0 equ 69D
 G1ASDAC0 equ 2
 G1ASDAC1 equ 3
 G1ASDBD0 equ 4
 G1ASDBD1 equ 5
 G1ARSEN equ 6
 G1ASE equ 7

BANK13_COG1ASD1 equ 69E
 G1AS0E equ 0
 G1AS1E equ 1
 G1AS2E equ 2
 G1AS3E equ 3

BANK13_COG1STR equ 69F
 G1STRA equ 0
 G1STRB equ 1
 G1STRC equ 2
 G1STRD equ 3
 G1SDATA equ 4
 G1SDATB equ 5
 G1SDATC equ 6
 G1SDATD equ 7


BANK14_INDF0 equ 700
BANK14_INDF1 equ 701
BANK14_PCL equ 702
BANK14_STATUS equ 703
 C equ 0
 DC equ 1
 Z equ 2
 NOT_PD equ 3
 NOT_TO equ 4

BANK14_FSR0 equ 704
BANK14_FSR0H equ 705
BANK14_FSR1 equ 706
BANK14_FSR1H equ 707
BANK14_BSR equ 708
 BSR0 equ 0
 BSR1 equ 1
 BSR2 equ 2
 BSR3 equ 3
 BSR4 equ 4

BANK14_WREG equ 709
BANK14_PCLATH equ 70A
BANK14_INTCON equ 70B
 IOCIF equ 0
 INTF equ 1
 T0IF equ 2
 IOCIE equ 3
 INTE equ 4
 T0IE equ 5
 PEIE equ 6
 GIE equ 7


BANK15_INDF0 equ 780
BANK15_INDF1 equ 781
BANK15_PCL equ 782
BANK15_STATUS equ 783
 C equ 0
 DC equ 1
 Z equ 2
 NOT_PD equ 3
 NOT_TO equ 4

BANK15_FSR0 equ 784
BANK15_FSR0H equ 785
BANK15_FSR1 equ 786
BANK15_FSR1H equ 787
BANK15_BSR equ 788
 BSR0 equ 0
 BSR1 equ 1
 BSR2 equ 2
 BSR3 equ 3
 BSR4 equ 4

BANK15_WREG equ 789
BANK15_PCLATH equ 78A
BANK15_INTCON equ 78B
 IOCIF equ 0
 INTF equ 1
 T0IF equ 2
 IOCIE equ 3
 INTE equ 4
 T0IE equ 5
 PEIE equ 6
 GIE equ 7


BANK16_INDF0 equ 800
BANK16_INDF1 equ 801
BANK16_PCL equ 802
BANK16_STATUS equ 803
 C equ 0
 DC equ 1
 Z equ 2
 NOT_PD equ 3
 NOT_TO equ 4

BANK16_FSR0 equ 804
BANK16_FSR0H equ 805
BANK16_FSR1 equ 806
BANK16_FSR1H equ 807
BANK16_BSR equ 808
 BSR0 equ 0
 BSR1 equ 1
 BSR2 equ 2
 BSR3 equ 3
 BSR4 equ 4

BANK16_WREG equ 809
BANK16_PCLATH equ 80A
BANK16_INTCON equ 80B
 IOCIF equ 0
 INTF equ 1
 T0IF equ 2
 IOCIE equ 3
 INTE equ 4
 T0IE equ 5
 PEIE equ 6
 GIE equ 7


BANK17_INDF0 equ 880
BANK17_INDF1 equ 881
BANK17_PCL equ 882
BANK17_STATUS equ 883
 C equ 0
 DC equ 1
 Z equ 2
 NOT_PD equ 3
 NOT_TO equ 4

BANK17_FSR0 equ 884
BANK17_FSR0H equ 885
BANK17_FSR1 equ 886
BANK17_FSR1H equ 887
BANK17_BSR equ 888
 BSR0 equ 0
 BSR1 equ 1
 BSR2 equ 2
 BSR3 equ 3
 BSR4 equ 4

BANK17_WREG equ 889
BANK17_PCLATH equ 88A
BANK17_INTCON equ 88B
 IOCIF equ 0
 INTF equ 1
 T0IF equ 2
 IOCIE equ 3
 INTE equ 4
 T0IE equ 5
 PEIE equ 6
 GIE equ 7


BANK18_INDF0 equ 900
BANK18_INDF1 equ 901
BANK18_PCL equ 902
BANK18_STATUS equ 903
 C equ 0
 DC equ 1
 Z equ 2
 NOT_PD equ 3
 NOT_TO equ 4

BANK18_FSR0 equ 904
BANK18_FSR0H equ 905
BANK18_FSR1 equ 906
BANK18_FSR1H equ 907
BANK18_BSR equ 908
 BSR0 equ 0
 BSR1 equ 1
 BSR2 equ 2
 BSR3 equ 3
 BSR4 equ 4

BANK18_WREG equ 909
BANK18_PCLATH equ 90A
BANK18_INTCON equ 90B
 IOCIF equ 0
 INTF equ 1
 T0IF equ 2
 IOCIE equ 3
 INTE equ 4
 T0IE equ 5
 PEIE equ 6
 GIE equ 7


BANK19_INDF0 equ 980
BANK19_INDF1 equ 981
BANK19_PCL equ 982
BANK19_STATUS equ 983
 C equ 0
 DC equ 1
 Z equ 2
 NOT_PD equ 3
 NOT_TO equ 4

BANK19_FSR0 equ 984
BANK19_FSR0H equ 985
BANK19_FSR1 equ 986
BANK19_FSR1H equ 987
BANK19_BSR equ 988
 BSR0 equ 0
 BSR1 equ 1
 BSR2 equ 2
 BSR3 equ 3
 BSR4 equ 4

BANK19_WREG equ 989
BANK19_PCLATH equ 98A
BANK19_INTCON equ 98B
 IOCIF equ 0
 INTF equ 1
 T0IF equ 2
 IOCIE equ 3
 INTE equ 4
 T0IE equ 5
 PEIE equ 6
 GIE equ 7


BANK20_INDF0 equ 0A00
BANK20_INDF1 equ 0A01
BANK20_PCL equ 0A02
BANK20_STATUS equ 0A03
 C equ 0
 DC equ 1
 Z equ 2
 NOT_PD equ 3
 NOT_TO equ 4

BANK20_FSR0 equ 0A04
BANK20_FSR0H equ 0A05
BANK20_FSR1 equ 0A06
BANK20_FSR1H equ 0A07
BANK20_BSR equ 0A08
 BSR0 equ 0
 BSR1 equ 1
 BSR2 equ 2
 BSR3 equ 3
 BSR4 equ 4

BANK20_WREG equ 0A09
BANK20_PCLATH equ 0A0A
BANK20_INTCON equ 0A0B
 IOCIF equ 0
 INTF equ 1
 T0IF equ 2
 IOCIE equ 3
 INTE equ 4
 T0IE equ 5
 PEIE equ 6
 GIE equ 7


BANK21_INDF0 equ 0A80
BANK21_INDF1 equ 0A81
BANK21_PCL equ 0A82
BANK21_STATUS equ 0A83
 C equ 0
 DC equ 1
 Z equ 2
 NOT_PD equ 3
 NOT_TO equ 4

BANK21_FSR0 equ 0A84
BANK21_FSR0H equ 0A85
BANK21_FSR1 equ 0A86
BANK21_FSR1H equ 0A87
BANK21_BSR equ 0A88
 BSR0 equ 0
 BSR1 equ 1
 BSR2 equ 2
 BSR3 equ 3
 BSR4 equ 4

BANK21_WREG equ 0A89
BANK21_PCLATH equ 0A8A
BANK21_INTCON equ 0A8B
 IOCIF equ 0
 INTF equ 1
 T0IF equ 2
 IOCIE equ 3
 INTE equ 4
 T0IE equ 5
 PEIE equ 6
 GIE equ 7


BANK22_INDF0 equ 0B00
BANK22_INDF1 equ 0B01
BANK22_PCL equ 0B02
BANK22_STATUS equ 0B03
 C equ 0
 DC equ 1
 Z equ 2
 NOT_PD equ 3
 NOT_TO equ 4

BANK22_FSR0 equ 0B04
BANK22_FSR0H equ 0B05
BANK22_FSR1 equ 0B06
BANK22_FSR1H equ 0B07
BANK22_BSR equ 0B08
 BSR0 equ 0
 BSR1 equ 1
 BSR2 equ 2
 BSR3 equ 3
 BSR4 equ 4

BANK22_WREG equ 0B09
BANK22_PCLATH equ 0B0A
BANK22_INTCON equ 0B0B
 IOCIF equ 0
 INTF equ 1
 T0IF equ 2
 IOCIE equ 3
 INTE equ 4
 T0IE equ 5
 PEIE equ 6
 GIE equ 7


BANK23_INDF0 equ 0B80
BANK23_INDF1 equ 0B81
BANK23_PCL equ 0B82
BANK23_STATUS equ 0B83
 C equ 0
 DC equ 1
 Z equ 2
 NOT_PD equ 3
 NOT_TO equ 4

BANK23_FSR0 equ 0B84
BANK23_FSR0H equ 0B85
BANK23_FSR1 equ 0B86
BANK23_FSR1H equ 0B87
BANK23_BSR equ 0B88
 BSR0 equ 0
 BSR1 equ 1
 BSR2 equ 2
 BSR3 equ 3
 BSR4 equ 4

BANK23_WREG equ 0B89
BANK23_PCLATH equ 0B8A
BANK23_INTCON equ 0B8B
 IOCIF equ 0
 INTF equ 1
 T0IF equ 2
 IOCIE equ 3
 INTE equ 4
 T0IE equ 5
 PEIE equ 6
 GIE equ 7


BANK24_INDF0 equ 0C00
BANK24_INDF1 equ 0C01
BANK24_PCL equ 0C02
BANK24_STATUS equ 0C03
 C equ 0
 DC equ 1
 Z equ 2
 NOT_PD equ 3
 NOT_TO equ 4

BANK24_FSR0 equ 0C04
BANK24_FSR0H equ 0C05
BANK24_FSR1 equ 0C06
BANK24_FSR1H equ 0C07
BANK24_BSR equ 0C08
 BSR0 equ 0
 BSR1 equ 1
 BSR2 equ 2
 BSR3 equ 3
 BSR4 equ 4

BANK24_WREG equ 0C09
BANK24_PCLATH equ 0C0A
BANK24_INTCON equ 0C0B
 IOCIF equ 0
 INTF equ 1
 T0IF equ 2
 IOCIE equ 3
 INTE equ 4
 T0IE equ 5
 PEIE equ 6
 GIE equ 7


BANK25_INDF0 equ 0C80
BANK25_INDF1 equ 0C81
BANK25_PCL equ 0C82
BANK25_STATUS equ 0C83
 C equ 0
 DC equ 1
 Z equ 2
 NOT_PD equ 3
 NOT_TO equ 4

BANK25_FSR0 equ 0C84
BANK25_FSR0H equ 0C85
BANK25_FSR1 equ 0C86
BANK25_FSR1H equ 0C87
BANK25_BSR equ 0C88
 BSR0 equ 0
 BSR1 equ 1
 BSR2 equ 2
 BSR3 equ 3
 BSR4 equ 4

BANK25_WREG equ 0C89
BANK25_PCLATH equ 0C8A
BANK25_INTCON equ 0C8B
 IOCIF equ 0
 INTF equ 1
 T0IF equ 2
 IOCIE equ 3
 INTE equ 4
 T0IE equ 5
 PEIE equ 6
 GIE equ 7


BANK26_INDF0 equ 0D00
BANK26_INDF1 equ 0D01
BANK26_PCL equ 0D02
BANK26_STATUS equ 0D03
 C equ 0
 DC equ 1
 Z equ 2
 NOT_PD equ 3
 NOT_TO equ 4

BANK26_FSR0 equ 0D04
BANK26_FSR0H equ 0D05
BANK26_FSR1 equ 0D06
BANK26_FSR1H equ 0D07
BANK26_BSR equ 0D08
 BSR0 equ 0
 BSR1 equ 1
 BSR2 equ 2
 BSR3 equ 3
 BSR4 equ 4

BANK26_WREG equ 0D09
BANK26_PCLATH equ 0D0A
BANK26_INTCON equ 0D0B
 IOCIF equ 0
 INTF equ 1
 T0IF equ 2
 IOCIE equ 3
 INTE equ 4
 T0IE equ 5
 PEIE equ 6
 GIE equ 7


BANK27_INDF0 equ 0D80
BANK27_INDF1 equ 0D81
BANK27_PCL equ 0D82
BANK27_STATUS equ 0D83
 C equ 0
 DC equ 1
 Z equ 2
 NOT_PD equ 3
 NOT_TO equ 4

BANK27_FSR0 equ 0D84
BANK27_FSR0H equ 0D85
BANK27_FSR1 equ 0D86
BANK27_FSR1H equ 0D87
BANK27_BSR equ 0D88
 BSR0 equ 0
 BSR1 equ 1
 BSR2 equ 2
 BSR3 equ 3
 BSR4 equ 4

BANK27_WREG equ 0D89
BANK27_PCLATH equ 0D8A
BANK27_INTCON equ 0D8B
 IOCIF equ 0
 INTF equ 1
 T0IF equ 2
 IOCIE equ 3
 INTE equ 4
 T0IE equ 5
 PEIE equ 6
 GIE equ 7


BANK28_INDF0 equ 0E00
BANK28_INDF1 equ 0E01
BANK28_PCL equ 0E02
BANK28_STATUS equ 0E03
 C equ 0
 DC equ 1
 Z equ 2
 NOT_PD equ 3
 NOT_TO equ 4

BANK28_FSR0 equ 0E04
BANK28_FSR0H equ 0E05
BANK28_FSR1 equ 0E06
BANK28_FSR1H equ 0E07
BANK28_BSR equ 0E08
 BSR0 equ 0
 BSR1 equ 1
 BSR2 equ 2
 BSR3 equ 3
 BSR4 equ 4

BANK28_WREG equ 0E09
BANK28_PCLATH equ 0E0A
BANK28_INTCON equ 0E0B
 IOCIF equ 0
 INTF equ 1
 T0IF equ 2
 IOCIE equ 3
 INTE equ 4
 T0IE equ 5
 PEIE equ 6
 GIE equ 7


BANK28_PPSLOCK equ 0E0F
 PPSLOCKED equ 0

BANK28_INTPPS equ 0E10
BANK28_T0CKIPPS equ 0E11
BANK28_T1CKIPPS equ 0E12
BANK28_T1GPPS equ 0E13
BANK28_CCP1PPS equ 0E14
BANK28_CCP2PPS equ 0E15

BANK28_COGINPPS equ 0E17

BANK28_SSPCLKPPS equ 0E20
BANK28_SSPDATPPS equ 0E21
BANK28_SSPSSPPS equ 0E22

BANK28_RXPPS equ 0E24
BANK28_CKPPS equ 0E25

BANK28_CLCIN0PPS equ 0E28
BANK28_CLCIN1PPS equ 0E29
BANK28_CLCIN2PPS equ 0E2A
BANK28_CLCIN3PPS equ 0E2B

BANK29_INDF0 equ 0E80
BANK29_INDF1 equ 0E81
BANK29_PCL equ 0E82
BANK29_STATUS equ 0E83
 C equ 0
 DC equ 1
 Z equ 2
 NOT_PD equ 3
 NOT_TO equ 4

BANK29_FSR0 equ 0E84
BANK29_FSR0H equ 0E85
BANK29_FSR1 equ 0E86
BANK29_FSR1H equ 0E87
BANK29_BSR equ 0E88
 BSR0 equ 0
 BSR1 equ 1
 BSR2 equ 2
 BSR3 equ 3
 BSR4 equ 4

BANK29_WREG equ 0E89
BANK29_PCLATH equ 0E8A
BANK29_INTCON equ 0E8B
 IOCIF equ 0
 INTF equ 1
 T0IF equ 2
 IOCIE equ 3
 INTE equ 4
 T0IE equ 5
 PEIE equ 6
 GIE equ 7


BANK29_RA0PPS equ 0E90
BANK29_RA1PPS equ 0E91
BANK29_RA2PPS equ 0E92

BANK29_RA4PPS equ 0E94
BANK29_RA5PPS equ 0E95

BANK29_RC0PPS equ 0EA0
BANK29_RC1PPS equ 0EA1
BANK29_RC2PPS equ 0EA2
BANK29_RC3PPS equ 0EA3
BANK29_RC4PPS equ 0EA4
BANK29_RC5PPS equ 0EA5

BANK30_INDF0 equ 0F00
BANK30_INDF1 equ 0F01
BANK30_PCL equ 0F02
BANK30_STATUS equ 0F03
 C equ 0
 DC equ 1
 Z equ 2
 NOT_PD equ 3
 NOT_TO equ 4

BANK30_FSR0 equ 0F04
BANK30_FSR0H equ 0F05
BANK30_FSR1 equ 0F06
BANK30_FSR1H equ 0F07
BANK30_BSR equ 0F08
 BSR0 equ 0
 BSR1 equ 1
 BSR2 equ 2
 BSR3 equ 3
 BSR4 equ 4

BANK30_WREG equ 0F09
BANK30_PCLATH equ 0F0A
BANK30_INTCON equ 0F0B
 IOCIF equ 0
 INTF equ 1
 T0IF equ 2
 IOCIE equ 3
 INTE equ 4
 T0IE equ 5
 PEIE equ 6
 GIE equ 7


BANK30_CLCDATA equ 0F0F
 MCLC1OUT equ 0
 MCLC2OUT equ 1
 MCLC3OUT equ 2

BANK30_CLC1CON equ 0F10
 MODE0 equ 0
 MODE1 equ 1
 MODE2 equ 2
 INTN equ 3
 INTP equ 4
 OUT equ 5
 EN equ 7

BANK30_CLC1POL equ 0F11
 G1POL equ 0
 G2POL equ 1
 G3POL equ 2
 G4POL equ 3
 POL equ 7

BANK30_CLC1SEL0 equ 0F12
 D1S0 equ 0
 D1S1 equ 1
 D1S2 equ 2
 D1S3 equ 3
 D1S4 equ 4

BANK30_CLC1SEL1 equ 0F13
 D2S0 equ 0
 D2S1 equ 1
 D2S2 equ 2
 D2S3 equ 3
 D2S4 equ 4

BANK30_CLC1SEL2 equ 0F14
 D3S0 equ 0
 D3S1 equ 1
 D3S2 equ 2
 D3S3 equ 3
 D3S4 equ 4

BANK30_CLC1SEL3 equ 0F15
 D4S0 equ 0
 D4S1 equ 1
 D4S2 equ 2
 D4S3 equ 3
 D4S4 equ 4

BANK30_CLC1GLS0 equ 0F16
 D1N equ 0
 D1T equ 1
 D2N equ 2
 D2T equ 3
 D3N equ 4
 D3T equ 5
 D4N equ 6
 D4T equ 7

BANK30_CLC1GLS1 equ 0F17
 D1N equ 0
 D1T equ 1
 D2N equ 2
 D2T equ 3
 D3N equ 4
 D3T equ 5
 D4N equ 6
 D4T equ 7

BANK30_CLC1GLS2 equ 0F18
 D1N equ 0
 D1T equ 1
 D2N equ 2
 D2T equ 3
 D3N equ 4
 D3T equ 5
 D4N equ 6
 D4T equ 7

BANK30_CLC1GLS3 equ 0F19
 G4D1N equ 0
 G4D1T equ 1
 G4D2N equ 2
 G4D2T equ 3
 G4D3N equ 4
 G4D3T equ 5
 G4D4N equ 6
 G4D4T equ 7

BANK30_CLC2CON equ 0F1A
 MODE0 equ 0
 MODE1 equ 1
 MODE2 equ 2
 INTN equ 3
 INTP equ 4
 OUT equ 5
 EN equ 7

BANK30_CLC2POL equ 0F1B
 G1POL equ 0
 G2POL equ 1
 G3POL equ 2
 G4POL equ 3
 POL equ 7

BANK30_CLC2SEL0 equ 0F1C
 D1S0 equ 0
 D1S1 equ 1
 D1S2 equ 2
 D1S3 equ 3
 D1S4 equ 4

BANK30_CLC2SEL1 equ 0F1D
 D2S0 equ 0
 D2S1 equ 1
 D2S2 equ 2
 D2S3 equ 3
 D2S4 equ 4

BANK30_CLC2SEL2 equ 0F1E
 D3S0 equ 0
 D3S1 equ 1
 D3S2 equ 2
 D3S3 equ 3
 D3S4 equ 4

BANK30_CLC2SEL3 equ 0F1F
 D4S0 equ 0
 D4S1 equ 1
 D4S2 equ 2
 D4S3 equ 3
 D4S4 equ 4

BANK30_CLC2GLS0 equ 0F20
 D1N equ 0
 D1T equ 1
 D2N equ 2
 D2T equ 3
 D3N equ 4
 D3T equ 5
 D4N equ 6
 D4T equ 7

BANK30_CLC2GLS1 equ 0F21
 D1N equ 0
 D1T equ 1
 D2N equ 2
 D2T equ 3
 D3N equ 4
 D3T equ 5
 D4N equ 6
 D4T equ 7

BANK30_CLC2GLS2 equ 0F22
 D1N equ 0
 D1T equ 1
 D2N equ 2
 D2T equ 3
 D3N equ 4
 D3T equ 5
 D4N equ 6
 D4T equ 7

BANK30_CLC2GLS3 equ 0F23
 G4D1N equ 0
 G4D1T equ 1
 G4D2N equ 2
 G4D2T equ 3
 G4D3N equ 4
 G4D3T equ 5
 G4D4N equ 6
 G4D4T equ 7

BANK30_CLC3CON equ 0F24
 MODE0 equ 0
 MODE1 equ 1
 MODE2 equ 2
 INTN equ 3
 INTP equ 4
 OUT equ 5
 EN equ 7

BANK30_CLC3POL equ 0F25
 G1POL equ 0
 G2POL equ 1
 G3POL equ 2
 G4POL equ 3
 POL equ 7

BANK30_CLC3SEL0 equ 0F26
 D1S0 equ 0
 D1S1 equ 1
 D1S2 equ 2
 D1S3 equ 3
 D1S4 equ 4

BANK30_CLC3SEL1 equ 0F27
 D2S0 equ 0
 D2S1 equ 1
 D2S2 equ 2
 D2S3 equ 3
 D2S4 equ 4

BANK30_CLC3SEL2 equ 0F28
 D3S0 equ 0
 D3S1 equ 1
 D3S2 equ 2
 D3S3 equ 3
 D3S4 equ 4

BANK30_CLC3SEL3 equ 0F29
 D4S0 equ 0
 D4S1 equ 1
 D4S2 equ 2
 D4S3 equ 3
 D4S4 equ 4

BANK30_CLC3GLS0 equ 0F2A
 D1N equ 0
 D1T equ 1
 D2N equ 2
 D2T equ 3
 D3N equ 4
 D3T equ 5
 D4N equ 6
 D4T equ 7

BANK30_CLC3GLS1 equ 0F2B
 D1N equ 0
 D1T equ 1
 D2N equ 2
 D2T equ 3
 D3N equ 4
 D3T equ 5
 D4N equ 6
 D4T equ 7

BANK30_CLC3GLS2 equ 0F2C
 D1N equ 0
 D1T equ 1
 D2N equ 2
 D2T equ 3
 D3N equ 4
 D3T equ 5
 D4N equ 6
 D4T equ 7

BANK30_CLC3GLS3 equ 0F2D
 G4D1N equ 0
 G4D1T equ 1
 G4D2N equ 2
 G4D2T equ 3
 G4D3N equ 4
 G4D3T equ 5
 G4D4N equ 6
 G4D4T equ 7


BANK31_INDF0 equ 0F80
BANK31_INDF1 equ 0F81
BANK31_PCL equ 0F82
BANK31_STATUS equ 0F83
 C equ 0
 DC equ 1
 Z equ 2
 NOT_PD equ 3
 NOT_TO equ 4

BANK31_FSR0 equ 0F84
BANK31_FSR0H equ 0F85
BANK31_FSR1 equ 0F86
BANK31_FSR1H equ 0F87
BANK31_BSR equ 0F88
 BSR0 equ 0
 BSR1 equ 1
 BSR2 equ 2
 BSR3 equ 3
 BSR4 equ 4

BANK31_WREG equ 0F89
BANK31_PCLATH equ 0F8A
BANK31_INTCON equ 0F8B
 IOCIF equ 0
 INTF equ 1
 T0IF equ 2
 IOCIE equ 3
 INTE equ 4
 T0IE equ 5
 PEIE equ 6
 GIE equ 7


BANK31_STATUS_SHAD equ 0FE4
 C_SHAD equ 0
 DC_SHAD equ 1
 Z_SHAD equ 2

BANK31_WREG_SHAD equ 0FE5
BANK31_BSR_SHAD equ 0FE6
BANK31_PCLATH_SHAD equ 0FE7
BANK31_FSR0L_SHAD equ 0FE8
BANK31_FSR0H_SHAD equ 0FE9
BANK31_FSR1L_SHAD equ 0FEA
BANK31_FSR1H_SHAD equ 0FEB

BANK31_STKPTR equ 0FED
BANK31_TOSL equ 0FEE
BANK31_TOSH equ 0FEF


end ;
